/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * The Product Passport is a comprehensive data structure that encapsulates various details pertaining to a product, including its identification details, who issued it, batch information, provenance information, circularity information and a set of verifiable product conformity & sustainability claims.
 */
export interface DPP {
  type?: ("DigitalProductPassport" | "VerifiableCredential")[];
  /**
   * A list of JSON-LD context URIs that define the semantic meaning of properties within the credential.
   */
  "@context": ("https://www.w3.org/ns/credentials/v2" | "https://test.uncefact.org/vocabulary/untp/dpp/0.5.0/")[];
  /**
   * A unique identifier (URI) assigned to the product passport. May be a UUID
   */
  id: string;
  issuer: CredentialIssuer;
  /**
   * The date and time from which the credential is valid.
   */
  validFrom?: string;
  /**
   * The expiry date (if applicable) of this verifiable credential.
   */
  validUntil?: string;
  credentialSubject?: Product;
  [k: string]: unknown;
}
/**
 * The organisation that is the issuer of this VC. Note that the "id" property MUST be a W3C DID.  Other identifiers such as tax registration numbers can be listed in the "otherIdentifiers" property.
 */
export interface CredentialIssuer {
  type?: "CredentialIssuer"[];
  /**
   * The W3C DID of the issuer - should be a did:web or did:tdw
   */
  id: string;
  /**
   * The name of the issuer person or organisation
   */
  name: string;
  /**
   * An optional list of other registered identifiers for this credential issuer
   */
  otherIdentifier?: Identifier[];
}
/**
 * The ID and Name of an identified entity such as a product, facility, party, standard, etc.  If the identifier is a W3C DID then the corresponding DID document SHOULD include a serviceEndpoint of type "IdentityResolver". If the identifier is not a W3C DID then the id property SHOULD be an identity resolver URL.
 */
export interface Identifier {
  type?: "Identifier"[];
  /**
   * The globally unique ID of the entity as a resolvable URL according to ISO 18975. ExamplesProduct - id.gs1.org/01/09520123456788/21/12345  Party - abr.business.gov.au/ABN/View?abn=90664869327. Facility - did:web:facilities.example-company.com:123.
   */
  id: string;
  /**
   * The registered name of the entity within the identifier scheme.  Examples: product - EV battery 300Ah, Party - Sample Company Pty Ltd,  Facility - Green Acres battery factory
   */
  name: string;
  /**
   * The registration number (alphanumeric) of the entity within the register. Unique within the register.
   */
  registeredId?: string;
  idScheme?: IdentifierScheme;
}
/**
 * The identifier scheme.  Examples : Product - id.gs1.org/01,  Party - business.gov.au/abn,  Facility - did:web:facilities.acme.com.
 */
export interface IdentifierScheme {
  type?: "IdentifierScheme"[];
  /**
   * The globally unique identifier of the registration scheme. The scheme should be registered and discoverable from vocabulary.uncefact.org/identifierSchemes
   */
  id?: string;
  /**
   * The name of the identifier scheme.
   */
  name?: string;
}
/**
 * The subject of a digital product passport credential is the identified product.
 */
export interface Product {
  type?: "Product"[];
  /**
   * The globally unique ID of the product as a URI. Ideally as a resolvable URL according to ISO 18975.
   */
  id: string;
  /**
   * The registered name of the product within the identifier scheme.
   */
  name: string;
  /**
   * The registration number (alphanumeric) of the entity within the register. Unique within the register.
   */
  registeredId?: string;
  idScheme?: IdentifierScheme1;
  /**
   * A number or code representing a specific serialised item of the product. Unique within product class.
   */
  serialNumber?: string;
  /**
   * Identifier of the specific production batch of the product.  Unique within the product class.
   */
  batchNumber?: string;
  productImage?: Link;
  /**
   * A textual description providing details about the product.
   */
  description?: string;
  /**
   * A code representing the product's class, typically using the UN CPC (United Nations Central Product Classification) https://unstats.un.org/unsd/classifications/Econ/cpc
   */
  productCategory?: Classification[];
  /**
   * A URL pointing to further human readable information about the product.
   */
  furtherInformation?: Link1[];
  producedByParty?: Identifier1;
  producedAtFacility?: Identifier2;
  dimensions?: Dimension;
  /**
   * The ISO 8601 date on which the product batch or individual serialised item was manufactured.
   */
  productionDate?: string;
  /**
   * The country in which this item was produced / manufactured.
   *
   *     This is an enumerated value, but the list of valid values are too big, or change too often to include here. You can access the list of allowable values at this URL:  https://vocabulary.uncefact.org/CountryId
   *
   */
  countryOfProduction?: string;
  /**
   * Code to indicate the granularity of this digital product passport - item level, batch level or product class level.
   */
  granularityLevel?: "item" | "batch" | "model";
  dueDiligenceDeclaration?: Link2;
  /**
   * An array of Provenance objects providing details on the origin and mass fraction of components or ingredients of the product batch.
   */
  materialsProvenance?: Material[];
  /**
   * An array of claim objects representing various product conformity claims about the product / batch.  These can be sustainability claims, circularity claims, or any other claim type within the conformity topic list.
   */
  conformityClaim?: Claim[];
  circularityScorecard?: CircularityPerformance;
  emissionsScorecard?: EmissionsPerformance;
  traceabilityInformation?: TraceabilityPerformance;
  [k: string]: unknown;
}
/**
 * The identifier scheme for this product.  Eg a GS1 GTIN or an AU Livestock NLIS, or similar. If self issued then use the party ID of the issuer.
 */
export interface IdentifierScheme1 {
  type?: "IdentifierScheme"[];
  /**
   * The globally unique identifier of the registration scheme. The scheme should be registered and discoverable from vocabulary.uncefact.org/identifierSchemes
   */
  id?: string;
  /**
   * The name of the identifier scheme.
   */
  name?: string;
}
/**
 * Reference information (location, type, name) of an image of the product.
 */
export interface Link {
  type?: "Link"[];
  /**
   * The URL of the target resource.
   */
  linkURL?: string;
  /**
   * A display name for the target resource
   */
  linkName?: string;
  /**
   * The type of the target resource - drawn from a controlled vocabulary
   */
  linkType?: string;
}
/**
 * A classification scheme and code / name representing a category value for a product, entity, or facility.
 */
export interface Classification {
  type?: "Classification"[];
  /**
   * The globally unique URI representing the specific classifier value
   */
  id: string;
  /**
   * classification code within the scheme
   */
  code?: string;
  /**
   * Name of the classification represented by the code
   */
  name: string;
  /**
   * Classification scheme ID
   */
  schemeID?: string;
  /**
   * The name of the classification scheme
   */
  schemeName?: string;
}
/**
 * A structure to provide a URL link plus metadata associated with the link.
 */
export interface Link1 {
  type?: "Link"[];
  /**
   * The URL of the target resource.
   */
  linkURL?: string;
  /**
   * A display name for the target resource
   */
  linkName?: string;
  /**
   * The type of the target resource - drawn from a controlled vocabulary
   */
  linkType?: string;
}
/**
 * The ID and Name of an identified entity such as a product, facility, party, standard, etc.  If the identifier is a W3C DID then the corresponding DID document SHOULD include a serviceEndpoint of type "IdentityResolver". If the identifier is not a W3C DID then the id property SHOULD be an identity resolver URL.
 */
export interface Identifier1 {
  type?: "Identifier"[];
  /**
   * The globally unique ID of the entity as a resolvable URL according to ISO 18975. ExamplesProduct - id.gs1.org/01/09520123456788/21/12345  Party - abr.business.gov.au/ABN/View?abn=90664869327. Facility - did:web:facilities.example-company.com:123.
   */
  id: string;
  /**
   * The registered name of the entity within the identifier scheme.  Examples: product - EV battery 300Ah, Party - Sample Company Pty Ltd,  Facility - Green Acres battery factory
   */
  name: string;
  /**
   * The registration number (alphanumeric) of the entity within the register. Unique within the register.
   */
  registeredId?: string;
  idScheme?: IdentifierScheme;
}
/**
 * The ID and Name of an identified entity such as a product, facility, party, standard, etc.  If the identifier is a W3C DID then the corresponding DID document SHOULD include a serviceEndpoint of type "IdentityResolver". If the identifier is not a W3C DID then the id property SHOULD be an identity resolver URL.
 */
export interface Identifier2 {
  type?: "Identifier"[];
  /**
   * The globally unique ID of the entity as a resolvable URL according to ISO 18975. ExamplesProduct - id.gs1.org/01/09520123456788/21/12345  Party - abr.business.gov.au/ABN/View?abn=90664869327. Facility - did:web:facilities.example-company.com:123.
   */
  id: string;
  /**
   * The registered name of the entity within the identifier scheme.  Examples: product - EV battery 300Ah, Party - Sample Company Pty Ltd,  Facility - Green Acres battery factory
   */
  name: string;
  /**
   * The registration number (alphanumeric) of the entity within the register. Unique within the register.
   */
  registeredId?: string;
  idScheme?: IdentifierScheme;
}
/**
 * The physical dimensions of the product. Not every dimension is relevant to every products.  For example bulk materials may have weight and volume but not length, with, or height."weight":{"value":10, "unit":"KGM"}
 */
export interface Dimension {
  type?: "Dimension"[];
  weight?: Measure;
  length?: Measure1;
  width?: Measure2;
  height?: Measure3;
  volume?: Measure4;
  [k: string]: unknown;
}
/**
 * the weight of the product. EG {"value":10, "unit":"KGM"}
 */
export interface Measure {
  type?: "Measure"[];
  /**
   * The numeric value of the measure
   */
  value: number;
  /**
   * Unit of measure drawn from the UNECE Rec20 measure code list.
   *
   *     This is an enumerated value, but the list of valid values are too big, or change too often to include here. You can access the list of allowable values at this URL:  https://vocabulary.uncefact.org/UnitMeasureCode
   *
   */
  unit: string;
}
/**
 * The length of the product or packaging eg {"value":840, "unit":"MMT"}
 */
export interface Measure1 {
  type?: "Measure"[];
  /**
   * The numeric value of the measure
   */
  value: number;
  /**
   * Unit of measure drawn from the UNECE Rec20 measure code list.
   *
   *     This is an enumerated value, but the list of valid values are too big, or change too often to include here. You can access the list of allowable values at this URL:  https://vocabulary.uncefact.org/UnitMeasureCode
   *
   */
  unit: string;
}
/**
 * The width of the product or packaging. eg {"value":150, "unit":"MMT"}
 */
export interface Measure2 {
  type?: "Measure"[];
  /**
   * The numeric value of the measure
   */
  value: number;
  /**
   * Unit of measure drawn from the UNECE Rec20 measure code list.
   *
   *     This is an enumerated value, but the list of valid values are too big, or change too often to include here. You can access the list of allowable values at this URL:  https://vocabulary.uncefact.org/UnitMeasureCode
   *
   */
  unit: string;
}
/**
 * The height of the product or packaging. eg {"value":220, "unit":"MMT"}
 */
export interface Measure3 {
  type?: "Measure"[];
  /**
   * The numeric value of the measure
   */
  value: number;
  /**
   * Unit of measure drawn from the UNECE Rec20 measure code list.
   *
   *     This is an enumerated value, but the list of valid values are too big, or change too often to include here. You can access the list of allowable values at this URL:  https://vocabulary.uncefact.org/UnitMeasureCode
   *
   */
  unit: string;
}
/**
 * The displacement volume of the product. eg {"value":7.5, "unit":"LTR"}
 */
export interface Measure4 {
  type?: "Measure"[];
  /**
   * The numeric value of the measure
   */
  value: number;
  /**
   * Unit of measure drawn from the UNECE Rec20 measure code list.
   *
   *     This is an enumerated value, but the list of valid values are too big, or change too often to include here. You can access the list of allowable values at this URL:  https://vocabulary.uncefact.org/UnitMeasureCode
   *
   */
  unit: string;
}
/**
 * A structure to provide a URL link plus metadata associated with the link.
 */
export interface Link2 {
  type?: "Link"[];
  /**
   * The URL of the target resource.
   */
  linkURL?: string;
  /**
   * A display name for the target resource
   */
  linkName?: string;
  /**
   * The type of the target resource - drawn from a controlled vocabulary
   */
  linkType?: string;
}
/**
 * The material class encapsulates details about the origin or source of raw materials in a product, including the country of origin and the mass fraction.
 */
export interface Material {
  type?: "Material"[];
  /**
   * Name of this material (eg "Egyptian Cotton")
   */
  name: string;
  /**
   * A ISO 3166-1 code representing the country of origin of the component or ingredient.
   *
   *     This is an enumerated value, but the list of valid values are too big, or change too often to include here. You can access the list of allowable values at this URL:  https://vocabulary.uncefact.org/CountryId
   *
   */
  originCountry?: string;
  materialType?: Classification1;
  /**
   * The mass fraction of the product represented by this material. The sum of all mass fraction values for a given passport should be 1.
   */
  massFraction?: number;
  massAmount?: Measure5;
  /**
   * Mass fraction of this material that is recycled (eg 50% recycled Lithium)
   */
  recycledAmount?: number;
  /**
   * Indicates whether this material is hazardous. If true then the materialSafetyInformation property must be present
   */
  hazardous?: boolean;
  /**
   * Based 64 encoded binary used to represent a visual symbol for a given material.
   */
  symbol?: string;
  materialSafetyInformation?: Link3;
  [k: string]: unknown;
}
/**
 * A classification scheme and code / name representing a category value for a product, entity, or facility.
 */
export interface Classification1 {
  type?: "Classification"[];
  /**
   * The globally unique URI representing the specific classifier value
   */
  id: string;
  /**
   * classification code within the scheme
   */
  code?: string;
  /**
   * Name of the classification represented by the code
   */
  name: string;
  /**
   * Classification scheme ID
   */
  schemeID?: string;
  /**
   * The name of the classification scheme
   */
  schemeName?: string;
}
/**
 * The mass of the material component.
 */
export interface Measure5 {
  type?: "Measure"[];
  /**
   * The numeric value of the measure
   */
  value: number;
  /**
   * Unit of measure drawn from the UNECE Rec20 measure code list.
   *
   *     This is an enumerated value, but the list of valid values are too big, or change too often to include here. You can access the list of allowable values at this URL:  https://vocabulary.uncefact.org/UnitMeasureCode
   *
   */
  unit: string;
}
/**
 * A structure to provide a URL link plus metadata associated with the link.
 */
export interface Link3 {
  type?: "Link"[];
  /**
   * The URL of the target resource.
   */
  linkURL?: string;
  /**
   * A display name for the target resource
   */
  linkName?: string;
  /**
   * The type of the target resource - drawn from a controlled vocabulary
   */
  linkType?: string;
}
/**
 * A declaration of conformance with one or more criteria from a specific standard or regulation.
 */
export interface Claim {
  type?: ("Claim" | "Declaration")[];
  /**
   * The date on which this assessment was made.
   */
  assessmentDate?: string;
  /**
   * The list of specific values measured as part of this assessment (eg tensile strength)
   */
  declaredValue?: Metric[];
  /**
   * A unique identifier for the declaration. Often this will be an extension of the product.id or attestation.id. But could be a UUID.
   */
  id: string;
  referenceStandard?: Standard;
  referenceRegulation?: Regulation;
  /**
   * The specification against which the assessment is made.
   */
  assessmentCriteria?: Criterion[];
  /**
   * The list of specific values measured as part of this assessment (eg tensile strength)
   */
  declaredValues?: Metric[];
  /**
   * An indicator of whether or not the claim or assesment conforms to the regulatory or standard criteria.
   */
  conformance: boolean;
  /**
   * The conformity topic category for this assessment (eg vocabulary.uncefact.org/sustainability/emissions)
   */
  conformityTopic:
    | "environment.energy"
    | "environment.emissions"
    | "environment.water"
    | "environment.waste"
    | "environment.deforestation"
    | "environment.biodiversity"
    | "circularity.content"
    | "circularity.design"
    | "social.labour"
    | "social.rights"
    | "social.community"
    | "social.safety"
    | "governance.ethics"
    | "governance.compliance"
    | "governance.transparency";
  conformityEvidence?: SecureLink;
  [k: string]: unknown;
}
/**
 * A specific measure of performance against the criteria that governs the claim.  Expressed as an array of metric (ie unit of measure) / value (ie the actual numeric value) pairs.
 */
export interface Metric {
  type?: "Metric"[];
  /**
   * A human readable name for this metric (for example "Tensile strength")
   */
  metricName: string;
  metricValue: Measure6;
  /**
   * A score or rank associated with this measured metric.
   */
  score?: string;
  /**
   * A percentage represented as a numeric between 0 and 1 indicating the rage of accuracy of the claimed value (eg 0.05 means that the actual value is within 5% of the claimed value.)
   */
  accuracy?: number;
}
/**
 * A numeric value and unit of measure for this metric. Could be a measured value or a specified threshold. Eg {"value":400, "unit":"MPA"} as tensile strength of structural steel
 */
export interface Measure6 {
  type?: "Measure"[];
  /**
   * The numeric value of the measure
   */
  value: number;
  /**
   * Unit of measure drawn from the UNECE Rec20 measure code list.
   *
   *     This is an enumerated value, but the list of valid values are too big, or change too often to include here. You can access the list of allowable values at this URL:  https://vocabulary.uncefact.org/UnitMeasureCode
   *
   */
  unit: string;
}
/**
 * The reference to the standard that defines the specification / criteria
 */
export interface Standard {
  type?: "Standard"[];
  /**
   * A unique identifier for the standard (eg https://www.iso.org/standard/60857.html).
   */
  id?: string;
  /**
   * The name of the standard
   */
  name?: string;
  issuingParty: Identifier3;
  /**
   * The date when the standard was issued.
   */
  issueDate?: string;
}
/**
 * The ID and Name of an identified entity such as a product, facility, party, standard, etc.  If the identifier is a W3C DID then the corresponding DID document SHOULD include a serviceEndpoint of type "IdentityResolver". If the identifier is not a W3C DID then the id property SHOULD be an identity resolver URL.
 */
export interface Identifier3 {
  type?: "Identifier"[];
  /**
   * The globally unique ID of the entity as a resolvable URL according to ISO 18975. ExamplesProduct - id.gs1.org/01/09520123456788/21/12345  Party - abr.business.gov.au/ABN/View?abn=90664869327. Facility - did:web:facilities.example-company.com:123.
   */
  id: string;
  /**
   * The registered name of the entity within the identifier scheme.  Examples: product - EV battery 300Ah, Party - Sample Company Pty Ltd,  Facility - Green Acres battery factory
   */
  name: string;
  /**
   * The registration number (alphanumeric) of the entity within the register. Unique within the register.
   */
  registeredId?: string;
  idScheme?: IdentifierScheme;
}
/**
 * The reference to the regulation that defines the assessment criteria
 */
export interface Regulation {
  type?: "Regulation"[];
  /**
   * The globally unique identifier of this regulation.
   */
  id?: string;
  /**
   * The name of the regulation or act.
   */
  name?: string;
  /**
   * The legal jurisdiction (country) under which the regulation is issued.
   *
   *     This is an enumerated value, but the list of valid values are too big, or change too often to include here. You can access the list of allowable values at this URL:  https://vocabulary.uncefact.org/CountryId
   *
   */
  jurisdictionCountry?: string;
  administeredBy: Identifier4;
  /**
   * the date at which the regulation came into effect.
   */
  effectiveDate?: string;
}
/**
 * The ID and Name of an identified entity such as a product, facility, party, standard, etc.  If the identifier is a W3C DID then the corresponding DID document SHOULD include a serviceEndpoint of type "IdentityResolver". If the identifier is not a W3C DID then the id property SHOULD be an identity resolver URL.
 */
export interface Identifier4 {
  type?: "Identifier"[];
  /**
   * The globally unique ID of the entity as a resolvable URL according to ISO 18975. ExamplesProduct - id.gs1.org/01/09520123456788/21/12345  Party - abr.business.gov.au/ABN/View?abn=90664869327. Facility - did:web:facilities.example-company.com:123.
   */
  id: string;
  /**
   * The registered name of the entity within the identifier scheme.  Examples: product - EV battery 300Ah, Party - Sample Company Pty Ltd,  Facility - Green Acres battery factory
   */
  name: string;
  /**
   * The registration number (alphanumeric) of the entity within the register. Unique within the register.
   */
  registeredId?: string;
  idScheme?: IdentifierScheme;
}
/**
 * A specific rule or criterion within a standard or regulation. eg a carbon intensity calculation rule within an emissions standard.
 */
export interface Criterion {
  type?: "Criterion"[];
  /**
   * A unique identifier for the criterion within the standard  or regulation. For example CO2 emissions calculations for liquid fuel combustion.
   */
  id: string;
  /**
   * A name that describes this criteria.
   */
  name: string;
  /**
   * A conformity threshold defined by the specification (eg minimum compressive strength)
   */
  thresholdValues?: Metric[];
}
/**
 * A URI pointing to the evidence supporting the claim. SHOULD be a URL to a UNTP Digital Conformity Credential (DCC)
 */
export interface SecureLink {
  type?: ("SecureLink" | "Link")[];
  /**
   * The URL of the target resource.
   */
  linkURL?: string;
  /**
   * A display name for the target resource
   */
  linkName?: string;
  /**
   * The type of the target resource - drawn from a controlled vocabulary
   */
  linkType?: string;
  /**
   * The hash of the file.
   */
  hashDigest?: string;
  /**
   * The hashing algorithm used to create the target hash.  SHA-265 is the recommended standard
   */
  hashMethod?: "SHA-256" | "SHA-1";
  /**
   * The symmetric encryption algorithm used to encrypt the link target.  AES is the recommended standard. Decryption keys are expected to be passed out of bounds.
   */
  encryptionMethod?: "none" | "AES";
}
/**
 * A circularity performance scorecard
 */
export interface CircularityPerformance {
  type?: "CircularityPerformance"[];
  recyclingInformation?: Link4;
  repairInformation?: Link5;
  /**
   * The fraction of the this product (my mass) that has been designed to be recyclable / re-usable. This will be be the total fraction that can avoid waste / landfill.
   */
  recyclableContent?: number;
  /**
   * The fraction (by mass) of recycled / repurposed, repaired content in this product.  This will be the total virgin content fraction.
   */
  recycledContent?: number;
  /**
   * An indicator of durability defined as the lifetime (typically measures as usage cycles) for this product divided by the industry average. For example a battery with a 10,000 cycle lifetime where industry average is 5,000 cycles will have a durability factor of 2. If unknown set to 1 or omit.
   */
  utilityFactor?: number;
  /**
   * The overall circularity performance indicator for this product. Calculated as 1 - (V+W)/2D where - V = Virgin material proportion by mass (will be 1- recycled content) - W = Waste leakage proportion by mass (will be 1 - recyclableContent)  - D = Utility factor (set to 1 if unknown).
   */
  materialCircularityIndicator?: number;
  [k: string]: unknown;
}
/**
 * A structure to provide a URL link plus metadata associated with the link.
 */
export interface Link4 {
  type?: "Link"[];
  /**
   * The URL of the target resource.
   */
  linkURL?: string;
  /**
   * A display name for the target resource
   */
  linkName?: string;
  /**
   * The type of the target resource - drawn from a controlled vocabulary
   */
  linkType?: string;
}
/**
 * A structure to provide a URL link plus metadata associated with the link.
 */
export interface Link5 {
  type?: "Link"[];
  /**
   * The URL of the target resource.
   */
  linkURL?: string;
  /**
   * A display name for the target resource
   */
  linkName?: string;
  /**
   * The type of the target resource - drawn from a controlled vocabulary
   */
  linkType?: string;
}
/**
 * An emissions performance scorecard
 */
export interface EmissionsPerformance {
  type?: "EmissionsPerformance"[];
  /**
   * The carbon footprint of the product in KgCO2e per declared unit.
   */
  carbonFootprint: number;
  /**
   * The unit of product (EA, KGM, LTR, etc) that is the basis for carbon footprint.
   *
   *     This is an enumerated value, but the list of valid values are too big, or change too often to include here. You can access the list of allowable values at this URL:  https://vocabulary.uncefact.org/UnitMeasureCode
   *
   */
  declaredUnit: string;
  /**
   * The operational scope of the emissions performance. Only scope 1 & 2, or including upstream scope 3 (cradle to gate) or upstream and downstream scope 3 (cradle to grave).
   */
  operationalScope: "None" | "CradleToGate" | "CradleToGrave";
  /**
   * The ratio of emissions data from primary sources (ie from supplier / product specific information rather than secondary / industry averages).
   */
  primarySourcedRatio: number;
  reportingStandard?: Standard1;
  [k: string]: unknown;
}
/**
 * The reporting standard (eg GHG Protocol, IFRS S2, ESRS, etc) against which this product emissions performance is assessed.
 */
export interface Standard1 {
  type?: "Standard"[];
  /**
   * A unique identifier for the standard (eg https://www.iso.org/standard/60857.html).
   */
  id?: string;
  /**
   * The name of the standard
   */
  name?: string;
  issuingParty: Identifier3;
  /**
   * The date when the standard was issued.
   */
  issueDate?: string;
}
/**
 * An array of traceability events grouped by value chain process.  Where actual traceability events are unavailable or carry sensitive information, passport publishers may specify the extent to which the traceability information has been independently verified.
 */
export interface TraceabilityPerformance {
  type?: "TraceabilityPerformance"[];
  /**
   * Human readable name for the industry specific value chain process representing this traceability data set.
   */
  valueChainProcess?: string;
  /**
   * The proportion (0 to 1) of materials in this value chain process that have been  traced using verifiable traceability event.
   */
  verifiedRatio?: number;
  /**
   * A list of secure links to digital traceability events that support this traceability performance statement. May be encrypted for confidentiality purposes.
   */
  traceabilityEvent?: SecureLink1[];
  [k: string]: unknown;
}
/**
 * A binary file that is hashed ()for tamper evidence) and optionally encrypted (for confidentiality).
 */
export interface SecureLink1 {
  type?: ("SecureLink" | "Link")[];
  /**
   * The URL of the target resource.
   */
  linkURL?: string;
  /**
   * A display name for the target resource
   */
  linkName?: string;
  /**
   * The type of the target resource - drawn from a controlled vocabulary
   */
  linkType?: string;
  /**
   * The hash of the file.
   */
  hashDigest?: string;
  /**
   * The hashing algorithm used to create the target hash.  SHA-265 is the recommended standard
   */
  hashMethod?: "SHA-256" | "SHA-1";
  /**
   * The symmetric encryption algorithm used to encrypt the link target.  AES is the recommended standard. Decryption keys are expected to be passed out of bounds.
   */
  encryptionMethod?: "none" | "AES";
}
