// This file is auto-generated by @hey-api/openapi-ts

export type CanvasTemplate = {
    /**
     * The unique identifier of the canvas template
     */
    id: string;
    /**
     * The name of the template
     */
    name?: string;
    /**
     * The Handlebars template string
     */
    template: string;
    /**
     * JSON schema defining the template variables
     */
    schema: {
        [key: string]: unknown;
    };
    /**
     * When the template was created
     */
    createdAt: string;
    /**
     * When the template was last updated
     */
    updatedAt: string;
};

export type CreateCanvasTemplate = {
    name: string;
    template: string;
    schema: {
        [key: string]: unknown;
    };
};

export type CanvasTemplateInstance = {
    id: string;
    templateId: string;
    variables: {
        [key: string]: unknown;
    };
    renderedOutput: string;
    createdAt: string;
    updatedAt: string;
};

export type UpsertLinkDto = {
    /**
     * The relation type of the link.
     */
    relationType: string;
    /**
     * The href of the link.
     */
    href: string;
    /**
     * The object key of the link, if TYPE is OBJECT.
     */
    objectKey?: string;
    /**
     * The title of the link.
     */
    title: string;
    /**
     * The language of the link.
     */
    lang?: Array<string>;
};

export type CreateLinkSetDto = {
    /**
     * The identifier of the Link Set.
     */
    identifier: string;
    /**
     * The qualifier of the Link Set.
     */
    qualifier: string;
    /**
     * The links of the Link Set.
     */
    links: Array<UpsertLinkDto>;
};

export type Link = {
    /**
     * The relation type of the link.
     */
    relationType: string;
    /**
     * The href of the link.
     */
    href?: string;
    /**
     * The object key of the link, if TYPE is OBJECT.
     */
    objectKey?: string;
    /**
     * The title of the link
     */
    title: string;
    /**
     * The language of the link.
     */
    lang?: Array<string>;
    /**
     * The creation date of the Link.
     */
    createdAt: string;
    /**
     * The last update date of the Link.
     */
    updatedAt: string;
};

export type LinkSet = {
    /**
     * The ID of the Link Set.
     */
    id?: string;
    /**
     * The identifier of the Link Set.
     */
    identifier?: string;
    /**
     * The qualifier of the Link Set.
     */
    qualifier: string;
    /**
     * The links of the Link Set.
     */
    links: Array<Link>;
    /**
     * The creation date of the Link Set.
     */
    createdAt: string;
    /**
     * The last update date of the Link Set.
     */
    updatedAt: string;
};

export type UpdateLinkSetDto = {
    /**
     * The identifier of the Link Set.
     */
    identifier: string;
    /**
     * The qualifier of the Link Set.
     */
    qualifier: string;
    /**
     * The links of the Link Set.
     */
    links: Array<UpsertLinkDto>;
};

export type CreateExternalResolverDto = {
    /**
     * The href of the External Resolver.
     */
    href: string;
    /**
     * The pattern of the External Resolver.
     */
    pattern: string;
    /**
     * The qualifier of the External Resolver.
     */
    qualifier: string;
    /**
     * The creation data of the External Resolver.
     */
    childExternalResolvers: Array<string>;
};

export type UpdateExternalResolverDto = {
    /**
     * The href of the External Resolver.
     */
    href: string;
    /**
     * The pattern of the External Resolver.
     */
    pattern: string;
    /**
     * The qualifier of the External Resolver.
     */
    qualifier: string;
    /**
     * The creation data of the External Resolver.
     */
    childExternalResolvers: Array<string>;
};

export type IssueCredentialRequest = {
    [key: string]: unknown;
};

export type LinkedDataProof = {
    type: string;
    created: string;
    verificationMethod: string;
    proofPurpose: string;
    jws: string;
};

export type VerifiableCredential = {
    /**
     * The JSON-LD context of the credential.
     */
    '@context': Array<string>;
    /**
     * The ID of the credential.
     */
    id: string;
    /**
     * The JSON-LD type of the credential.
     */
    type: Array<string>;
    /**
     * The issuer of the credential.
     */
    issuer: string;
    /**
     * The issuance date of the credential.
     */
    issuanceDate: string;
    /**
     * The expiration date of the credential.
     */
    expirationDate: string;
    /**
     * The subject of the credential.
     */
    credentialSubject: {
        [key: string]: unknown;
    };
    proof: LinkedDataProof;
};

/**
 * Options for specifying how the LinkedDataProof is created.
 */
export type VerifyOptions = {
    /**
     * The URI of the verificationMethod used for the proof. Default assertionMethod URI.
     */
    verificationMethod?: string;
    /**
     * The purpose of the proof. Default 'assertionMethod'.
     */
    proofPurpose?: string;
    /**
     * The date and time of the proof (with a maximum accuracy in seconds). Default current system time.
     */
    created?: string;
    /**
     * A challenge provided by the requesting party of the proof. For example 6e62f66e-67de-11eb-b490-ef3eeefa55f2
     */
    challenge?: string;
    /**
     * The intended domain of validity for the proof. For example website.example
     */
    domain?: string;
};

export type VerifyCredentialRequest = {
    verifiableCredential: VerifiableCredential;
    options?: VerifyOptions;
};

export type CreateOrganization = {
    /**
     * Name given to the organization.
     */
    name: string;
};

export type Organization = {
    /**
     * Unique identifier of the organization.
     */
    id: string;
    /**
     * Name given to the organization.
     */
    name: string;
};

export type UpdateOrganization = {
    /**
     * Name given to the organization.
     */
    name: string;
};

export type CreateDid = {
    /**
     * The name of the DID.
     */
    name: string;
};

export type Did = {
    /**
     * Unique identifier of the DID.
     */
    id: string;
    /**
     * The DID.
     */
    did: string;
    /**
     * The DID alias.
     */
    alias: string;
    /**
     * The name given to the DID.
     */
    name: string;
};

export type Paginated = {
    total: number;
    page: number;
    limit: number;
};

export type PaginatedDids = {
    /**
     * The list of DIDs
     */
    items: Array<Did>;
    /**
     * The pagination metadata
     */
    metadata: Paginated;
};

export type HealthControllerGetStatusData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health/status';
};

export type HealthControllerGetStatusResponses = {
    200: unknown;
};

export type GetCanvasTemplateData = {
    body?: never;
    path: {
        /**
         * The ID of the Canvas Template to find
         */
        id: unknown;
    };
    query?: never;
    url: '/canvas-templates/{id}';
};

export type GetCanvasTemplateResponses = {
    /**
     * The Canvas Template was successfully obtained.
     */
    200: CanvasTemplate;
};

export type GetCanvasTemplateResponse = GetCanvasTemplateResponses[keyof GetCanvasTemplateResponses];

export type CreateCanvasTemplateData = {
    body: CreateCanvasTemplate;
    path?: never;
    query?: never;
    url: '/canvas-templates';
};

export type CreateCanvasTemplateResponses = {
    /**
     * The Canvas Template that was created.
     */
    200: CanvasTemplate;
};

export type CreateCanvasTemplateResponse = CreateCanvasTemplateResponses[keyof CreateCanvasTemplateResponses];

export type RenderCanvasTemplateData = {
    body: {
        [key: string]: string | number | boolean | {
            [key: string]: unknown;
        } | Array<unknown>;
    };
    path: {
        /**
         * The ID of the Canvas Template to render
         */
        id: string;
    };
    query?: never;
    url: '/canvas-templates/{id}/render';
};

export type RenderCanvasTemplateResponses = {
    /**
     * Instantiation of the Canvas Template as a Canvas Template Instance
     */
    200: CanvasTemplateInstance;
};

export type RenderCanvasTemplateResponse = RenderCanvasTemplateResponses[keyof RenderCanvasTemplateResponses];

export type GetLinkSetsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/link-sets';
};

export type GetLinkSetsResponses = {
    /**
     * The Link Sets were found and returned.
     */
    200: Array<LinkSet>;
};

export type GetLinkSetsResponse = GetLinkSetsResponses[keyof GetLinkSetsResponses];

export type CreateLinkSetData = {
    body: CreateLinkSetDto;
    path?: never;
    query?: never;
    url: '/link-sets';
};

export type CreateLinkSetResponses = {
    /**
     * The Link Set was created.
     */
    201: LinkSet;
};

export type CreateLinkSetResponse = CreateLinkSetResponses[keyof CreateLinkSetResponses];

export type DeleteLinkSetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/link-sets/{id}';
};

export type DeleteLinkSetResponses = {
    200: unknown;
};

export type GetLinkSetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/link-sets/{id}';
};

export type GetLinkSetResponses = {
    /**
     * The Link Set was found and returned.
     */
    200: LinkSet;
};

export type GetLinkSetResponse = GetLinkSetResponses[keyof GetLinkSetResponses];

export type UpdateLinkSetData = {
    body: UpdateLinkSetDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/link-sets/{id}';
};

export type UpdateLinkSetResponses = {
    /**
     * The Link Set was updated.
     */
    201: LinkSet;
};

export type UpdateLinkSetResponse = UpdateLinkSetResponses[keyof UpdateLinkSetResponses];

export type GetManyExternalResolversData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/external-resolvers';
};

export type GetManyExternalResolversResponses = {
    200: unknown;
};

export type CreateExternalResolverData = {
    body: CreateExternalResolverDto;
    path?: never;
    query?: never;
    url: '/external-resolvers';
};

export type CreateExternalResolverResponses = {
    201: unknown;
};

export type DeleteExternalResolverData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/external-resolvers/{id}';
};

export type DeleteExternalResolverResponses = {
    200: unknown;
};

export type GetExternalResolverData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/external-resolvers/{id}';
};

export type GetExternalResolverResponses = {
    200: unknown;
};

export type UpdateExternalResolverData = {
    body: UpdateExternalResolverDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/external-resolvers/{id}';
};

export type UpdateExternalResolverResponses = {
    200: unknown;
};

export type CredentialsControllerGetCredentialData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/credentials/{id}';
};

export type CredentialsControllerGetCredentialResponses = {
    200: unknown;
};

export type CreateOrganizationData = {
    body: CreateOrganization;
    path?: never;
    query?: never;
    url: '/organizations';
};

export type CreateOrganizationErrors = {
    /**
     * Invalid request
     */
    400: unknown;
};

export type CreateOrganizationResponses = {
    /**
     * Organization created successfully
     */
    201: Organization;
};

export type CreateOrganizationResponse = CreateOrganizationResponses[keyof CreateOrganizationResponses];

export type DeleteOrganizationData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/organizations/{id}';
};

export type DeleteOrganizationErrors = {
    /**
     * Organization not found
     */
    404: unknown;
};

export type DeleteOrganizationResponses = {
    /**
     * Organization deleted successfully
     */
    200: unknown;
};

export type GetOrganizationData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/organizations/{id}';
};

export type GetOrganizationErrors = {
    /**
     * Organization not found
     */
    404: unknown;
};

export type GetOrganizationResponses = {
    /**
     * Organization retrieved successfully
     */
    200: Organization;
};

export type GetOrganizationResponse = GetOrganizationResponses[keyof GetOrganizationResponses];

export type UpdateOrganizationData = {
    body: UpdateOrganization;
    path: {
        id: string;
    };
    query?: never;
    url: '/organizations/{id}';
};

export type UpdateOrganizationErrors = {
    /**
     * Invalid request
     */
    400: unknown;
    /**
     * Organization not found
     */
    404: unknown;
};

export type UpdateOrganizationResponses = {
    /**
     * Organization updated successfully
     */
    200: Organization;
};

export type UpdateOrganizationResponse = UpdateOrganizationResponses[keyof UpdateOrganizationResponses];

export type GetDidsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page
         */
        limit?: number;
    };
    url: '/did';
};

export type GetDidsResponses = {
    /**
     * DIDs fetched successfully
     */
    200: PaginatedDids;
};

export type GetDidsResponse = GetDidsResponses[keyof GetDidsResponses];

export type CreateDidData = {
    body: CreateDid;
    path?: never;
    query?: never;
    url: '/did';
};

export type CreateDidErrors = {
    /**
     * Invalid request
     */
    400: unknown;
};

export type CreateDidResponses = {
    /**
     * DID created successfully
     */
    201: Did;
};

export type CreateDidResponse = CreateDidResponses[keyof CreateDidResponses];

export type DeleteDidData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/did/{id}';
};

export type DeleteDidResponses = {
    /**
     * DID deleted successfully
     */
    204: void;
};

export type DeleteDidResponse = DeleteDidResponses[keyof DeleteDidResponses];

export type GetDidData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/did/{id}';
};

export type GetDidErrors = {
    /**
     * DID not found
     */
    403: unknown;
};

export type GetDidResponses = {
    /**
     * DID fetched successfully
     */
    200: Did;
};

export type GetDidResponse = GetDidResponses[keyof GetDidResponses];