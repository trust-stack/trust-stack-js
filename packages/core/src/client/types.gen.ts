// This file is auto-generated by @hey-api/openapi-ts

export type CreateAsset = {
    /**
     * The name of the asset
     */
    name: string;
    /**
     * The description of the asset
     */
    description?: string;
    /**
     * The S3 object ID of the asset
     */
    objects: Array<string>;
};

export type Asset = {
    /**
     * The unique identifier of the asset
     */
    id: string;
    /**
     * The name of the asset
     */
    name: string;
    /**
     * The description of the asset
     */
    description?: string;
    /**
     * The creation date of the asset
     */
    createdAt: string;
    /**
     * The last update date of the asset
     */
    updatedAt: string;
    /**
     * Whether the asset is deleted
     */
    deleted: boolean;
    /**
     * The S3 objects associated with the asset
     */
    objects: Array<string>;
};

export type UpdateAsset = {
    /**
     * The name of the asset
     */
    name: string;
    /**
     * The description of the asset
     */
    description?: string;
    /**
     * The S3 object ID of the asset
     */
    objects: Array<string>;
};

export type CreateAssetObservation = {
    /**
     * The description of the observation
     */
    observation: string;
    /**
     * The objects associated with the observation
     */
    objects: Array<string>;
};

export type AssetObservation = {
    /**
     * The id of the observation
     */
    id: string;
    /**
     * The description of the observation
     */
    observation: string;
    /**
     * The time the observation was created
     */
    createdAt: string;
    /**
     * The objects associated with the observation
     */
    objects: string;
};

export type CreateCalendarEntry = {
    /**
     * The title of the calendar entry
     */
    title: string;
    /**
     * The description of the calendar entry
     */
    description?: string;
    /**
     * The start date and time of the calendar entry
     */
    startDate: string;
    /**
     * The end date and time of the calendar entry
     */
    endDate: string;
};

export type CalendarEntry = {
    /**
     * The unique identifier of the calendar entry
     */
    id: string;
    /**
     * The title of the calendar entry
     */
    title: string;
    /**
     * The description of the calendar entry
     */
    description?: string;
    /**
     * The start date and time of the calendar entry
     */
    startDate: string;
    /**
     * The end date and time of the calendar entry
     */
    endDate: string;
    /**
     * The ID of the associated asset
     */
    assetId?: string;
};

export type CreateTenantUser = {
    [key: string]: unknown;
};

export type TenantUser = {
    /**
     * The ID of the tenant user
     */
    id: string;
    /**
     * The ID of the tenant
     */
    tenantId: string;
    /**
     * The name of the tenant user
     */
    name: string;
    /**
     * The email of the tenant user
     */
    email: string;
    /**
     * The date and time the tenant user was created
     */
    createdAt: string;
    /**
     * The date and time the tenant user was updated
     */
    updatedAt: string;
};

export type UpdateTenantUser = {
    [key: string]: unknown;
};

export type S3UploadObject = {
    /**
     * The MIME type of the object
     */
    mimeType: string;
    /**
     * The size of the object
     */
    size: number;
};

export type S3UploadResponse = {
    /**
     * The presigned URL to upload the file to
     */
    url: string;
    /**
     * The created S3 object record
     */
    s3ObjectId: string;
};

export type S3Object = {
    /**
     * The ID of the object
     */
    id: string;
    /**
     * Presigned URL of the object
     */
    url: string;
    /**
     * The key of the object
     */
    key: string;
    /**
     * The MIME type of the object
     */
    mimeType?: string;
    /**
     * The size of the object
     */
    size?: number;
    /**
     * The tenant ID of the object
     */
    createdAt: string;
    /**
     * The updated at date of the object
     */
    updatedAt: string;
};

export type CanvasTemplate = {
    /**
     * The unique identifier of the canvas template
     */
    id: string;
    /**
     * The name of the template
     */
    name?: string;
    /**
     * The Handlebars template string
     */
    template: string;
    /**
     * JSON schema defining the template variables
     */
    schema: {
        [key: string]: unknown;
    };
    /**
     * When the template was created
     */
    createdAt: string;
    /**
     * When the template was last updated
     */
    updatedAt: string;
};

export type CreateCanvasTemplate = {
    name: string;
    template: string;
    schema: {
        [key: string]: unknown;
    };
    themeId?: string;
};

export type CanvasTemplateInstance = {
    id: string;
    templateId: string;
    variables: {
        [key: string]: unknown;
    };
    renderedOutput: string;
    createdAt: string;
    updatedAt: string;
};

export type CreateLink = {
    /**
     * The path of the Link.
     */
    path: string;
    /**
     * The type of the Link.
     */
    relationType: string;
    /**
     * The title of the Link.
     */
    title?: string;
    /**
     * The href of the Link.
     */
    href: string;
    /**
     * The type of the Link.
     */
    type?: string;
    /**
     * The href language of the Link.
     */
    hreflang?: Array<string>;
    /**
     * Whether the Link is the default Link.
     */
    default?: boolean;
};

export type LinkConfiguration = {
    /**
     * The id of the Link.
     */
    id: string;
    /**
     * The created at date of the Link.
     */
    createdAt: string;
    /**
     * The updated at date of the Link.
     */
    updatedAt: string;
    /**
     * The path of the Link.
     */
    path: string;
    /**
     * The type of the Link.
     */
    type: string;
    /**
     * The title of the Link.
     */
    title?: string;
    /**
     * The href of the Link.
     */
    href: string;
    /**
     * The href of the Link.
     */
    hrefLang?: Array<string>;
};

export type CreateCredentialIssuerProfile = {
    /**
     * The name of the issuer party or organization for this profile.
     */
    name: string;
    /**
     * The identifier (did:web) used to identify the issuer for this profile.
     */
    identifierId: string;
};

/**
 * The profile used to issue credentials such as Digital Product Passports against.
 */
export type CredentialIssuerProfile = {
    /**
     * The unique identifier of the credential issuer profile.
     */
    id: string;
    /**
     * The organization name used in credential issuance.
     */
    name: string;
    /**
     * The identifier used to issue credentials.
     */
    identifierId: string;
};

export type Paginated = {
    total: number;
    page: number;
    limit: number;
};

export type PaginatedCredentialIssuerProfiles = {
    /**
     * The list of credential issuer profiles
     */
    items: Array<CredentialIssuerProfile>;
    /**
     * The pagination metadata
     */
    metadata: Paginated;
};

export type IssueCredentialRequest = {
    [key: string]: unknown;
};

/**
 * A JSON-LD Verifiable Credential without a proof.
 */
export type Credential = {
    /**
     * The JSON-LD context of the credential.
     */
    '@context': Array<string>;
    /**
     * The ID of the credential.
     */
    id: string;
    /**
     * The JSON-LD type of the credential.
     */
    type: Array<string>;
    /**
     * The issuer of the credential.
     */
    issuer: string;
    /**
     * The issuance date of the credential.
     */
    issuanceDate: string;
    /**
     * The expiration date of the credential.
     */
    expirationDate: string;
    /**
     * The subject of the credential.
     */
    credentialSubject: {
        [key: string]: unknown;
    };
};

export type IssueCredentialResponse = {
    /**
     * Credential issued.
     */
    credential: Credential;
};

export type LinkedDataProof = {
    type: string;
    created: string;
    verificationMethod: string;
    proofPurpose: string;
    jws: string;
};

export type VerifiableCredential = {
    /**
     * The JSON-LD context of the credential.
     */
    '@context': Array<string>;
    /**
     * The ID of the credential.
     */
    id: string;
    /**
     * The JSON-LD type of the credential.
     */
    type: Array<string>;
    /**
     * The issuer of the credential.
     */
    issuer: string;
    /**
     * The issuance date of the credential.
     */
    issuanceDate: string;
    /**
     * The expiration date of the credential.
     */
    expirationDate: string;
    /**
     * The subject of the credential.
     */
    credentialSubject: {
        [key: string]: unknown;
    };
    proof: LinkedDataProof;
};

/**
 * Options for specifying how the LinkedDataProof is created.
 */
export type VerifyOptions = {
    /**
     * The URI of the verificationMethod used for the proof. Default assertionMethod URI.
     */
    verificationMethod?: string;
    /**
     * The purpose of the proof. Default 'assertionMethod'.
     */
    proofPurpose?: string;
    /**
     * The date and time of the proof (with a maximum accuracy in seconds). Default current system time.
     */
    created?: string;
    /**
     * A challenge provided by the requesting party of the proof. For example 6e62f66e-67de-11eb-b490-ef3eeefa55f2
     */
    challenge?: string;
    /**
     * The intended domain of validity for the proof. For example website.example
     */
    domain?: string;
};

export type VerifyCredentialRequest = {
    verifiableCredential: VerifiableCredential;
    options?: VerifyOptions;
};

export type VerifyCredentialResponse = {
    /**
     * The checks performed
     */
    checks: Array<Array<unknown>>;
    /**
     * Warnings
     */
    warnings: Array<Array<unknown>>;
    /**
     * Errors
     */
    errors: Array<Array<unknown>>;
};

export type CreateCustodyCommission = {
    /**
     * The unique identifier for this commission
     */
    identifier: string;
    /**
     * List of registered consumer IDs
     */
    registeredConsumers?: Array<string>;
};

export type CustodyCommission = {
    /**
     * The unique identifier of the custody commission
     */
    id: string;
    /**
     * The unique identifier for this commission
     */
    identifier: string;
    /**
     * List of registered consumer IDs
     */
    registeredConsumers: Array<string>;
    /**
     * When the custody commission was created
     */
    createdAt: string;
    /**
     * When the custody commission was last updated
     */
    updatedAt: string;
};

export type ConsumeCustodyCommission = {
    /**
     * The identifier of the custody commission to consume
     */
    identifier: string;
    /**
     * The ID of the consumer consuming the commission
     */
    consumedBy: string;
};

export type CreateDid = {
    /**
     * The name of the DID.
     */
    name: string;
};

export type Did = {
    /**
     * Unique identifier of the DID.
     */
    id: string;
    /**
     * The DID.
     */
    did: string;
    /**
     * The DID alias.
     */
    alias: string;
    /**
     * The name given to the DID.
     */
    name: string;
};

export type PaginatedDids = {
    /**
     * The list of DIDs
     */
    items: Array<Did>;
    /**
     * The pagination metadata
     */
    metadata: Paginated;
};

export enum TrustGraphNodeType {
    DTE = 'DTE',
    DCC = 'DCC',
    DPP = 'DPP',
    DIA = 'DIA',
    DFR = 'DFR'
}

export type TrustGraphNode = {
    /**
     * The id of the trust graph node
     */
    id: string;
    /**
     * The hash of the trust graph node
     */
    hash: string;
    /**
     * The raw data of the trust graph node
     */
    raw: {
        [key: string]: unknown;
    };
    /**
     * The type of the trust graph node
     */
    type: TrustGraphNodeType;
};

export type TrustGraphEdge = {
    /**
     * The source of the trust graph edge
     */
    source: string;
    /**
     * The target of the trust graph edge
     */
    target: string;
};

export enum PolicyResultStatus {
    PENDING = 'PENDING',
    SUCCESS = 'SUCCESS',
    FAILURE = 'FAILURE'
}

export type PolicyResult = {
    /**
     * The id of the policy result
     */
    id: string;
    /**
     * The updated at date of the policy result
     */
    updatedAt: string;
    /**
     * The created at date of the policy result
     */
    createdAt: string;
    /**
     * The status of the policy result
     */
    status: PolicyResultStatus;
    /**
     * The name of the policy
     */
    policyName: string;
    /**
     * The description of the policy
     */
    policyDescription?: string;
    /**
     * The constraints that were evaluated
     */
    constraints: Array<string>;
};

export type Policy = {
    /**
     * The id of the policy
     */
    id: string;
    /**
     * The updated at date of the policy result
     */
    updatedAt: string;
    /**
     * The created at date of the policy result
     */
    createdAt: string;
    /**
     * The name of the policy
     */
    name: string;
    /**
     * The description of the policy
     */
    description: string;
    /**
     * The constraints of the policy
     */
    constraints: Array<string>;
};

export type TrustGraph = {
    /**
     * The id of the trust graph
     */
    id: string;
    /**
     * The hash of the trust graph
     */
    hash: string;
    /**
     * The nodes of the trust graph
     */
    nodes: Array<TrustGraphNode>;
    /**
     * The edges of the trust graph
     */
    edges: Array<TrustGraphEdge>;
    /**
     * The type of the trust graph
     */
    type: TrustGraphNodeType;
    /**
     * The policy results of the trust graph
     */
    policyResults: Array<PolicyResult>;
    /**
     * The policies applied to the trust graph
     */
    policies: Array<Policy>;
};

export type TraverseTrustGraph = {
    /**
     * The target identifier to traverse from.
     */
    identifier: string;
    /**
     * The policies to evaluate
     */
    policies?: Array<string>;
};

export type CreateDppDto = {
    /**
     * The id of the credential issuer profile in UUID format
     */
    credentialIssuerProfileId: string;
    /**
     * The valid from date of the DPP in ISO 8601 format
     */
    validFrom: string;
    /**
     * The valid to date of the DPP in ISO 8601 format
     */
    validUntil: string;
    /**
     * The version of the DPP, by default the latest published version will be used.
     */
    version: string;
    /**
     * The credential subject of the DPP
     */
    credentialSubject: {
        [key: string]: unknown;
    };
};

export type Dpp = {
    /**
     * The id of the DPP in UUID format
     */
    id: string;
};

export type SetEventExtensionSchema = {
    /**
     * The JSON schema definition
     */
    schema: {
        [key: string]: unknown;
    };
};

export type SetIlmdSchema = {
    /**
     * The JSON schema definition
     */
    schema: {
        [key: string]: unknown;
    };
};

export type SetEventForm = {
    schema: {
        [key: string]: unknown;
    };
    /**
     * Handler of a event form.
     */
    handler: string;
    /**
     * Hydrator of an event form.
     */
    hydrator: string;
};

export type SetEventSchema = {
    /**
     * The code of the event tag, a unique identifier
     */
    code: string;
    /**
     * The name of the event tag
     */
    name?: string;
    /**
     * The description of the event tag
     */
    description?: string;
    /**
     * Schema of the event extension associated with this event schema.
     */
    extensionSchema?: SetEventExtensionSchema;
    /**
     * The structured schema for a new version, stored in SchemaDefinition
     */
    ilmdSchema?: SetIlmdSchema;
    /**
     * The event form associated with this event schema.
     */
    eventForm?: SetEventForm;
    /**
     * The icon of the event tag
     */
    icon?: string;
};

export type EventExtensionSchema = {
    /**
     * The unique identifier of the schema
     */
    id: string;
    /**
     * The JSON schema definition
     */
    schema: {
        [key: string]: unknown;
    };
    /**
     * The creation timestamp
     */
    createdAt: string;
};

/**
 * The schema of an ILMD
 */
export type IlmdSchema = {
    /**
     * The unique identifier of the ILMD schema
     */
    id: string;
    /**
     * The JSON schema definition
     */
    schema: {
        [key: string]: unknown;
    };
    /**
     * The creation timestamp
     */
    createdAt: string;
};

export type EventForm = {
    id: string;
    schema: {
        [key: string]: unknown;
    };
    handler: string;
    handlerCompiled: string;
    hydrator: string;
    hydratorCompiled: string;
    createdAt: string;
    updatedAt: string;
};

export type EventSchema = {
    /**
     * The id of the event tag
     */
    id: string;
    /**
     * The code of the event tag, a unique identifier
     */
    code: string;
    /**
     * The name of the event tag
     */
    name: string;
    /**
     * The description of the event tag
     */
    description: string;
    /**
     * The schema definition for custom fields
     */
    extensionSchema?: Array<EventExtensionSchema>;
    /**
     * The ilmd schema definition for custom fields
     */
    ilmdSchema?: IlmdSchema;
    /**
     * The event form definition for custom fields
     */
    eventForm?: EventForm;
    /**
     * The date and time the event tag was created
     */
    createdAt: string;
    /**
     * The date and time the event tag was updated
     */
    updatedAt: string;
    /**
     * Whether the event tag is deleted
     */
    deleted: boolean;
    /**
     * The date and time the event tag was deleted
     */
    deletedAt: string;
    /**
     * The icon of the event tag
     */
    icon: string;
};

export type AppRailItem = {
    /**
     * Label of the item.
     */
    label: string;
    /**
     * Icon to render
     */
    icon: string;
    /**
     * Href of the item.
     */
    route: string;
};

export type AppBarItem = {
    icon: string;
    route: string;
    label: string;
};

export type AppAction = {
    label: string;
    icon: string;
    route: string;
};

export type AppActionGroup = {
    label: string;
    /**
     * Actions rendered in the group.
     */
    actions: Array<AppAction>;
};

export type AppEntry = {
    /**
     * The mobile route of the app entry
     */
    routeMobile: string;
    /**
     * The web route of the app entry
     */
    routeWeb: string;
};

export type AppTheme = {
    /**
     * The source color value
     */
    color: string;
    /**
     * The theme variables
     */
    variables: {
        [key: string]: unknown;
    };
};

export type AppFrame = {
    /**
     * The name of the app, by default is the organisation name
     */
    name: string;
    rail: Array<AppRailItem>;
    bar: Array<AppBarItem>;
    actions: Array<AppActionGroup>;
    entry: AppEntry;
    theme: AppTheme;
};

export type SetAppFrame = {
    rail: Array<AppRailItem>;
    bar: Array<AppBarItem>;
    actions: Array<AppActionGroup>;
    entry: AppEntry;
    /**
     * The color of the app theme
     */
    themeColor: string;
};

export type CreateInstanceIdentifier = {
    /**
     * The EPC class of the quantity element
     */
    epc?: string;
    /**
     * The trade item of the quantity element
     */
    tradeItem?: string;
};

export type CreateQuantityElement = {
    /**
     * The EPC class of the quantity element
     */
    epcClass?: string;
    /**
     * The trade item of the quantity element. This will create an incrementing batch number.
     */
    tradeItem?: string;
    /**
     * Whether the quantity element is a class reference, if false, a lot number is assigned.
     */
    classReference?: boolean;
    /**
     * The quantity of the item
     */
    quantity: number;
    /**
     * The unit of measurement for the quantity
     */
    unit?: string;
};

export type Source = {
    /**
     * The type of source
     */
    sourceType: 'OWNING_PARTY' | 'POSSESSING_PARTY' | 'LOCATION' | 'LOGISTICS_PROVIDER';
    /**
     * The source string
     */
    source?: string;
    /**
     * The partner id
     */
    partner?: string;
};

export type Destination = {
    /**
     * The type of destination
     */
    destinationType: 'OWNING_PARTY' | 'POSSESSING_PARTY' | 'LOCATION' | 'LOGISTICS_PROVIDER';
    /**
     * The destination string
     */
    destination?: string;
    /**
     * The partner id
     */
    partner?: string;
};

export type CreateReadPoint = {
    /**
     * The identifier of the read point
     */
    identifier?: string;
    /**
     * The latitude of the location.
     */
    lat?: number;
    /**
     * The longitude of the location.
     */
    lng?: number;
};

export type SeafoodElements = {
    /**
     * The catch area of the seafood event data
     */
    catchArea: string;
};

export type CreateEvent = {
    /**
     * The time of the event
     */
    eventTime: string;
    /**
     * The type of the event
     */
    eventType: 'ASSOCIATION_EVENT' | 'OBJECT_EVENT' | 'AGGREGATION_EVENT' | 'TRANSACTION_EVENT' | 'TRANSFORMATION_EVENT';
    /**
     * The ACTION of the event.
     */
    action: 'OBSERVE' | 'ADD' | 'DELETE';
    /**
     * The tag associated with the event
     */
    eventTag?: string;
    /**
     * The business step associated with the event
     */
    bizStep?: 'ACCEPTING' | 'ARRIVING' | 'ASSEMBLING' | 'COLLECTING' | 'COMMISSIONING' | 'CONSIGNING' | 'CREATING_CLASS_INSTANCE' | 'CYCLE_COUNTING' | 'DECOMMISSIONING' | 'DEPARTING' | 'DESTROYING' | 'DISASSEMBLING' | 'DISPENSING' | 'ENCODING' | 'ENTERING_EXITING' | 'HOLDING' | 'INSPECTING' | 'INSTALLING' | 'KILLING' | 'LOADING' | 'OTHER' | 'PACKING' | 'PICKING' | 'RECEIVING' | 'REMOVING' | 'REPACKAGING' | 'REPAIRING' | 'REPLACING' | 'RESERVING' | 'RETAIL_SELLING' | 'SHIPPING' | 'STAGING_OUTBOUND' | 'STOCK_TAKING' | 'STOCKING' | 'STORING' | 'TRANSPORTING' | 'UNLOADING' | 'UNPACKING' | 'VOID_SHIPPING' | 'SENSOR_REPORTING' | 'SAMPLING';
    /**
     * The disposition of the event
     */
    disposition?: 'ACTIVE' | 'CONTAINER_CLOSED' | 'DAMAGED' | 'DESTROYED' | 'DISPENSED' | 'DISPOSED' | 'ENCODED' | 'EXPIRED' | 'IN_PROGRESS' | 'IN_TRANSIT' | 'INACTIVE' | 'NO_PEDIGREE_MATCH' | 'NON_SELLABLE_OTHER' | 'PARTIALLY_DISPENSED' | 'RECALLED' | 'RESERVED' | 'RETAIL_SOLD' | 'RETURNED' | 'SELLABLE_ACCESSIBLE' | 'SELLABLE_NOT_ACCESSIBLE' | 'STOLEN' | 'UNKNOWN' | 'AVAILABLE' | 'COMPLETENESS_VERIFIED' | 'COMPLETENESS_INFERRED' | 'CONFORMANT' | 'CONTAINER_OPEN' | 'MISMATCH_INSTANCE' | 'MISMATCH_CLASS' | 'MISMATCH_QUANTITY' | 'NEEDS_REPLACEMENT' | 'NON_CONFORMANT' | 'UNAVAILABLE';
    /**
     * List of EPCs associated with the event
     */
    epcs?: Array<CreateInstanceIdentifier>;
    /**
     * List of input EPCs associated with the event
     */
    inputEpcs?: Array<CreateInstanceIdentifier>;
    /**
     * List of output EPCs associated with the event
     */
    outputEpcs?: Array<CreateInstanceIdentifier>;
    /**
     * List of quantities associated with the event
     */
    quantityList?: Array<CreateQuantityElement>;
    /**
     * Output ist of quantities associated with the event
     */
    outputQuantityList?: Array<CreateQuantityElement>;
    /**
     * Input list of quantities associated with the event
     */
    inputQuantityList?: Array<CreateQuantityElement>;
    /**
     * List of sources associated with the event
     */
    sourceList?: Array<Source>;
    /**
     * List of destinations associated with the event
     */
    destinationList?: Array<Destination>;
    /**
     * The read point associated with the event
     */
    readPoint?: CreateReadPoint;
    /**
     * The seafood event data associated with the event
     */
    seafood?: SeafoodElements;
    /**
     * List of images associated with the event
     */
    images?: Array<string>;
    /**
     * The extension of the event
     */
    extension?: {
        [key: string]: unknown;
    };
    /**
     * The ILMD of the event
     */
    ilmd?: {
        [key: string]: unknown;
    };
    /**
     * The list of objects associated with the event
     */
    objects?: Array<string>;
};

export type QuantityElement = {
    /**
     * The EPC class of the quantity element
     */
    epcClass: string;
    /**
     * The resolver URL of the quantity element
     */
    resolverUrl: string;
    /**
     * The quantity of the item
     */
    quantity: number;
    /**
     * The unit of measurement for the quantity
     */
    unit: string;
};

export type ReadPoint = {
    /**
     * The identifier of the read point
     */
    identifier?: string;
    /**
     * The latitude of the read point
     */
    lat?: number;
    /**
     * The longitude of the read point
     */
    lng?: number;
};

export type InstanceIdentifierDto = {
    /**
     * The instance identifier
     */
    epc: string;
    /**
     * The resolver URL of the quantity element
     */
    resolverUrl: string;
};

export type EventIlmd = {
    /**
     * The schema associated with the ILMD
     */
    schema: {
        [key: string]: unknown;
    };
    /**
     * The ILMD associated with the event
     */
    value: {
        [key: string]: unknown;
    };
};

export type Event = {
    /**
     * The id of the event
     */
    id: string;
    /**
     * The time of the event was created
     */
    createdAt: string;
    /**
     * The user id of the event
     */
    userId?: string;
    /**
     * The time of the event
     */
    eventTime: string;
    /**
     * The type of the event
     */
    eventType: 'ASSOCIATION_EVENT' | 'OBJECT_EVENT' | 'AGGREGATION_EVENT' | 'TRANSACTION_EVENT' | 'TRANSFORMATION_EVENT';
    /**
     * The action of the event
     */
    action: 'OBSERVE' | 'ADD' | 'DELETE';
    /**
     * The schema associated with the event
     */
    schema?: EventSchema;
    /**
     * The business step associated with the event
     */
    bizStep?: 'ACCEPTING' | 'ARRIVING' | 'ASSEMBLING' | 'COLLECTING' | 'COMMISSIONING' | 'CONSIGNING' | 'CREATING_CLASS_INSTANCE' | 'CYCLE_COUNTING' | 'DECOMMISSIONING' | 'DEPARTING' | 'DESTROYING' | 'DISASSEMBLING' | 'DISPENSING' | 'ENCODING' | 'ENTERING_EXITING' | 'HOLDING' | 'INSPECTING' | 'INSTALLING' | 'KILLING' | 'LOADING' | 'OTHER' | 'PACKING' | 'PICKING' | 'RECEIVING' | 'REMOVING' | 'REPACKAGING' | 'REPAIRING' | 'REPLACING' | 'RESERVING' | 'RETAIL_SELLING' | 'SHIPPING' | 'STAGING_OUTBOUND' | 'STOCK_TAKING' | 'STOCKING' | 'STORING' | 'TRANSPORTING' | 'UNLOADING' | 'UNPACKING' | 'VOID_SHIPPING' | 'SENSOR_REPORTING' | 'SAMPLING';
    /**
     * The disposition of the event
     */
    disposition?: 'ACTIVE' | 'CONTAINER_CLOSED' | 'DAMAGED' | 'DESTROYED' | 'DISPENSED' | 'DISPOSED' | 'ENCODED' | 'EXPIRED' | 'IN_PROGRESS' | 'IN_TRANSIT' | 'INACTIVE' | 'NO_PEDIGREE_MATCH' | 'NON_SELLABLE_OTHER' | 'PARTIALLY_DISPENSED' | 'RECALLED' | 'RESERVED' | 'RETAIL_SOLD' | 'RETURNED' | 'SELLABLE_ACCESSIBLE' | 'SELLABLE_NOT_ACCESSIBLE' | 'STOLEN' | 'UNKNOWN' | 'AVAILABLE' | 'COMPLETENESS_VERIFIED' | 'COMPLETENESS_INFERRED' | 'CONFORMANT' | 'CONTAINER_OPEN' | 'MISMATCH_INSTANCE' | 'MISMATCH_CLASS' | 'MISMATCH_QUANTITY' | 'NEEDS_REPLACEMENT' | 'NON_CONFORMANT' | 'UNAVAILABLE';
    /**
     * List of quantities associated with the event
     */
    quantityList?: Array<QuantityElement>;
    /**
     * Output list of quantities associated with the event
     */
    outputQuantityList?: Array<QuantityElement>;
    /**
     * Input list of quantities associated with the event
     */
    inputQuantityList?: Array<QuantityElement>;
    /**
     * List of sources associated with the event
     */
    sourceList?: Array<Source>;
    /**
     * List of destinations associated with the event
     */
    destinationList?: Array<Destination>;
    /**
     * The read point associated with the event
     */
    readPoint?: ReadPoint;
    /**
     * The instance identifiers associated with the event
     */
    epcs?: Array<InstanceIdentifierDto>;
    /**
     * The instance identifiers associated with the event
     */
    inputEpcs?: Array<InstanceIdentifierDto>;
    /**
     * The instance identifiers associated with the event
     */
    outputEpcs?: Array<InstanceIdentifierDto>;
    /**
     * The images associated with the event
     */
    images?: Array<string>;
    /**
     * The extension associated with the event
     */
    extension?: {
        [key: string]: unknown;
    };
    /**
     * The ILMD associated with the event
     */
    ilmd?: EventIlmd;
    /**
     * The seafood elements associated with the event
     */
    seafood?: SeafoodElements;
    /**
     * The objects associated with the event
     */
    objects?: Array<string>;
};

export type CreateLocation = {
    /**
     * The name of the location
     */
    name: string;
    /**
     * The id of the parent location
     */
    parentLocationId?: string | null;
    /**
     * The code associated with the location
     */
    code?: string;
    /**
     * The extension of the location
     */
    extension?: {
        [key: string]: unknown;
    };
};

export type LocationExtensionSchema = {
    /**
     * The unique identifier of the schema
     */
    id: string;
    /**
     * The JSON schema definition
     */
    schema: {
        [key: string]: unknown;
    };
    /**
     * The creation timestamp
     */
    createdAt: string;
};

export type LocationSchema = {
    /**
     * The id of the location schema
     */
    id: string;
    /**
     * The code of the location schema, a unique identifier
     */
    code: string;
    /**
     * The name of the location schema
     */
    name: string;
    /**
     * The description of the location schema
     */
    description: string;
    /**
     * The schema definition for custom fields
     */
    extensionSchema?: LocationExtensionSchema;
    /**
     * The date and time the location schema was created
     */
    createdAt: string;
    /**
     * The date and time the location schema was updated
     */
    updatedAt: string;
    /**
     * Whether the location schema is deleted
     */
    deleted: boolean;
    /**
     * The date and time the location schema was deleted
     */
    deletedAt: string;
};

export type LocationExtensionDto = {
    /**
     * The extension schema associated with the location
     */
    schema: {
        [key: string]: unknown;
    };
    /**
     * The value of the extension
     */
    value: {
        [key: string]: unknown;
    };
};

export type Location = {
    /**
     * The id of the location
     */
    id: string;
    /**
     * The identifier of the location
     */
    identifier: string;
    /**
     * The reference number of the location
     */
    referenceNumber: number;
    /**
     * The name of the location
     */
    name: string;
    /**
     * The id of the parent location
     */
    parentLocationId?: string | null;
    /**
     * The schema associated with the location
     */
    schema?: LocationSchema;
    /**
     * The extension associated with the location
     */
    extension?: LocationExtensionDto;
};

export type InstanceLevelInventory = {
    /**
     * The id of the trade item
     */
    tradeItemId: string;
    /**
     * The count of the trade item
     */
    count: number;
};

export type LotLevelInventory = {
    /**
     * The id of the trade item
     */
    tradeItemId: string;
    /**
     * The quantity of the trade item
     */
    quantity: number;
    /**
     * The unit of the trade item quantity
     */
    unit: 'KG' | 'EA' | 'L';
};

export type ClassLevelInventory = {
    /**
     * The id of the trade item
     */
    tradeItemId: string;
    /**
     * The quantity of the trade item
     */
    quantity: number;
    /**
     * The unit of the trade item quantity
     */
    unit: 'KG' | 'EA' | 'L';
};

export type LocationInventory = {
    /**
     * The id of the location
     */
    id: string;
    /**
     * The date and time to derive the inventory at
     */
    dateTime: string;
    /**
     * The instance level inventory of the location
     */
    instances: Array<InstanceLevelInventory>;
    /**
     * The lot level inventory of the location
     */
    lots: Array<LotLevelInventory>;
    /**
     * The class level inventory of the location
     */
    classes: Array<ClassLevelInventory>;
};

export type CreateLocationExtensionSchema = {
    /**
     * The JSON schema definition
     */
    schema: {
        [key: string]: unknown;
    };
};

export type CreateLocationSchema = {
    /**
     * The code of the location schema, a unique identifier
     */
    code: string;
    /**
     * The name of the location schema
     */
    name?: string;
    /**
     * The description of the location schema
     */
    description?: string;
    /**
     * Schema of the location extension associated with this schema.
     */
    extensionSchema?: CreateLocationExtensionSchema;
};

export type CreatePartner = {
    /**
     * The name of the partner
     */
    name: string;
    /**
     * The code of the partner schema, a unique identifier
     */
    code?: string;
    /**
     * The extension data for the partner
     */
    extension?: {
        [key: string]: unknown;
    };
    /**
     * The email of the partner
     */
    email?: string;
    /**
     * The first name of the partner
     */
    firstName?: string;
    /**
     * The middle name of the partner
     */
    middleName?: string;
    /**
     * The last name of the partner
     */
    lastName?: string;
    /**
     * The contact number of the partner
     */
    contactNumber?: string;
    /**
     * The address of the partner
     */
    streetAddressOne?: string;
    /**
     * The city of the partner
     */
    city?: string;
    /**
     * The state of the partner
     */
    stateOrRegion?: string;
};

export type PartnerExtensionSchema = {
    /**
     * The id of the partner extension schema
     */
    id: string;
    /**
     * The JSON schema for validating partner extension data
     */
    schema: {
        [key: string]: unknown;
    };
    /**
     * The date and time the partner extension schema was created
     */
    createdAt: string;
};

export type PartnerSchema = {
    /**
     * The id of the partner schema
     */
    id: string;
    /**
     * The code of the partner schema, a unique identifier
     */
    code: string;
    /**
     * The name of the partner schema
     */
    name: string;
    /**
     * The description of the partner schema
     */
    description: string;
    /**
     * The extension schemas associated with this partner schema
     */
    extensionSchema?: PartnerExtensionSchema;
    /**
     * The date and time the partner schema was created
     */
    createdAt: string;
    /**
     * The date and time the partner schema was updated
     */
    updatedAt: string;
    /**
     * Whether the partner schema is deleted
     */
    deleted: boolean;
    /**
     * The date and time the partner schema was deleted
     */
    deletedAt: string;
};

export type PartnerExtensionDto = {
    /**
     * The extension schema associated with the partner
     */
    schema: {
        [key: string]: unknown;
    };
    /**
     * The value of the extension
     */
    value: {
        [key: string]: unknown;
    };
};

export type Partner = {
    /**
     * The id of the partner
     */
    id: string;
    /**
     * The code of the partner schema, a unique identifier
     */
    code?: string;
    /**
     * The name of the partner
     */
    name: string;
    /**
     * The schema associated with the partner
     */
    schema?: PartnerSchema;
    /**
     * The extension associated with the partner
     */
    extension?: PartnerExtensionDto;
    /**
     * The email of the partner
     */
    email?: string;
    /**
     * The first name of the partner
     */
    firstName?: string;
    /**
     * The middle name of the partner
     */
    middleName?: string;
    /**
     * The last name of the partner
     */
    lastName?: string;
    /**
     * The contact number of the partner
     */
    contactNumber?: string;
    /**
     * The address of the partner
     */
    streetAddressOne?: string;
    /**
     * The city of the partner
     */
    city?: string;
    /**
     * The state of the partner
     */
    stateOrRegion?: string;
};

export type CreatePartnerExtensionSchema = {
    /**
     * The JSON schema definition
     */
    schema: {
        [key: string]: unknown;
    };
};

export type CreatePartnerSchema = {
    /**
     * The code of the partner schema, a unique identifier
     */
    code: string;
    /**
     * The name of the partner schema
     */
    name: string;
    /**
     * The description of the partner schema
     */
    description: string;
    /**
     * Schema of the partner extension associated with this schema.
     */
    extensionSchema?: CreatePartnerExtensionSchema;
};

export type CreateTradeItem = {
    /**
     * The code of the trade item, a unique identifier
     */
    code?: string;
    /**
     * The name of the trade item
     */
    name: string;
    /**
     * The extension of the trade item
     */
    extension?: {
        [key: string]: unknown;
    };
};

export type TradeItemExtensionSchema = {
    /**
     * The unique identifier of the schema
     */
    id: string;
    /**
     * The JSON schema definition
     */
    schema: {
        [key: string]: unknown;
    };
    /**
     * The creation timestamp
     */
    createdAt: string;
};

export type TradeItemSchema = {
    /**
     * The id of the trade item schema
     */
    id: string;
    /**
     * The code of the trade item schema, a unique identifier
     */
    code: string;
    /**
     * The name of the trade item schema
     */
    name: string;
    /**
     * The description of the trade item schema
     */
    description: string;
    /**
     * The schema definition for custom fields
     */
    extensionSchema?: TradeItemExtensionSchema;
    /**
     * The date and time the trade item schema was created
     */
    createdAt: string;
    /**
     * The date and time the trade item schema was updated
     */
    updatedAt: string;
    /**
     * Whether the trade item schema is deleted
     */
    deleted: boolean;
    /**
     * The date and time the trade item schema was deleted
     */
    deletedAt: string;
};

export type TradeItemExtensionDto = {
    /**
     * The extension schema associated with the trade item
     */
    schema: {
        [key: string]: unknown;
    };
    /**
     * The value of the extension
     */
    value: {
        [key: string]: unknown;
    };
};

export type TradeItem = {
    /**
     * The id of the trade item
     */
    id: string;
    /**
     * The code of the trade item
     */
    code?: string;
    /**
     * The name of the trade item
     */
    name: string;
    /**
     * The schema associated with the trade item
     */
    schema?: TradeItemSchema;
    /**
     * The extension associated with the trade item
     */
    extension?: TradeItemExtensionDto;
};

export type CreateTradeItemExtensionSchema = {
    /**
     * The JSON schema definition
     */
    schema: {
        [key: string]: unknown;
    };
};

export type CreateTradeItemSchema = {
    /**
     * The code of the trade item schema, a unique identifier
     */
    code: string;
    /**
     * The name of the trade item schema
     */
    name?: string;
    /**
     * The description of the trade item schema
     */
    description?: string;
    /**
     * Schema of the trade item extension associated with this schema.
     */
    extensionSchema?: CreateTradeItemExtensionSchema;
};

export type CreateOrganization = {
    /**
     * Optional ID for the organization. Only allowed in sandbox environments.
     */
    id?: string | null;
    /**
     * Name given to the organization.
     */
    name: string;
    /**
     * Unique prefix for the organization that will be used in subdomains (e.g., prefix.trustlink.dev).
     */
    prefix: string;
};

export type Organization = {
    /**
     * Unique identifier of the organization.
     */
    id: string;
    /**
     * Name given to the organization.
     */
    name: string;
};

export type UpdateOrganization = {
    /**
     * Name given to the organization.
     */
    name: string;
};

export type ScreenHeader = {
    /**
     * The title of the screen
     */
    title: string;
    /**
     * The subtitle of the screen
     */
    subtitle: string;
    /**
     * The size of the screen
     */
    size: 'small' | 'medium' | 'large';
};

export type TrustGraphScreen = {
    /**
     * The trust graph
     */
    trustGraph: TrustGraph;
    /**
     * The header of the screen
     */
    header: ScreenHeader;
};

export type CreateSchema = {
    /**
     * The name of the schema
     */
    name: string;
    /**
     * The schema
     */
    schema: {
        [key: string]: unknown;
    };
};

export type Schema = {
    /**
     * The id of the schema
     */
    id: string;
    /**
     * The name of the schema
     */
    name: string;
    /**
     * The schema
     */
    schema: {
        [key: string]: unknown;
    };
};

export type UpdateSchema = {
    /**
     * The id of the schema
     */
    id: string;
    /**
     * The name of the schema
     */
    name: string;
    /**
     * The schema
     */
    schema: {
        [key: string]: unknown;
    };
};

export type HealthCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health/status';
};

export type HealthCheckResponses = {
    200: unknown;
};

export type GetAssetsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page
         */
        limit?: number;
    };
    url: '/assets';
};

export type GetAssetsResponses = {
    /**
     * The assets have been successfully retrieved
     */
    200: Array<Asset>;
};

export type GetAssetsResponse = GetAssetsResponses[keyof GetAssetsResponses];

export type CreateAssetData = {
    body: CreateAsset;
    path?: never;
    query?: never;
    url: '/assets';
};

export type CreateAssetErrors = {
    /**
     * Invalid asset data
     */
    400: unknown;
};

export type CreateAssetResponses = {
    /**
     * Asset created successfully
     */
    201: Asset;
};

export type CreateAssetResponse = CreateAssetResponses[keyof CreateAssetResponses];

export type DeleteAssetData = {
    body?: never;
    path: {
        /**
         * The ID of the asset to delete
         */
        id: string;
    };
    query?: never;
    url: '/assets/{id}';
};

export type DeleteAssetErrors = {
    /**
     * The asset could not be found
     */
    404: unknown;
};

export type DeleteAssetResponses = {
    /**
     * The asset has been successfully deleted
     */
    200: unknown;
};

export type GetAssetByIdData = {
    body?: never;
    path: {
        /**
         * The ID of the asset to get
         */
        id: string;
    };
    query?: never;
    url: '/assets/{id}';
};

export type GetAssetByIdErrors = {
    /**
     * Asset not found
     */
    404: unknown;
};

export type GetAssetByIdResponses = {
    /**
     * The asset has been successfully retrieved
     */
    200: Asset;
};

export type GetAssetByIdResponse = GetAssetByIdResponses[keyof GetAssetByIdResponses];

export type UpdateAssetData = {
    body: UpdateAsset;
    path: {
        /**
         * The ID of the asset to update
         */
        id: string;
    };
    query?: never;
    url: '/assets/{id}';
};

export type UpdateAssetErrors = {
    /**
     * Invalid request
     */
    404: unknown;
};

export type UpdateAssetResponses = {
    /**
     * The asset has been successfully updated
     */
    200: Asset;
};

export type UpdateAssetResponse = UpdateAssetResponses[keyof UpdateAssetResponses];

export type GetAssetObservationsData = {
    body?: never;
    path: {
        /**
         * The ID of the asset
         */
        assetId: string;
    };
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page
         */
        limit?: number;
    };
    url: '/assets/{assetId}/observations';
};

export type GetAssetObservationsResponses = {
    /**
     * The observations have been successfully retrieved
     */
    200: Array<AssetObservation>;
};

export type GetAssetObservationsResponse = GetAssetObservationsResponses[keyof GetAssetObservationsResponses];

export type CreateAssetObservationData = {
    body: CreateAssetObservation;
    path: {
        /**
         * The ID of the asset
         */
        assetId: string;
    };
    query?: never;
    url: '/assets/{assetId}/observations';
};

export type CreateAssetObservationErrors = {
    /**
     * Invalid observation data
     */
    400: unknown;
};

export type CreateAssetObservationResponses = {
    /**
     * Asset observation created successfully
     */
    201: AssetObservation;
};

export type CreateAssetObservationResponse = CreateAssetObservationResponses[keyof CreateAssetObservationResponses];

export type DeleteAssetObservationData = {
    body?: never;
    path: {
        /**
         * The ID of the asset
         */
        assetId: string;
        /**
         * The ID of the observation to delete
         */
        id: string;
    };
    query?: never;
    url: '/assets/{assetId}/observations/{id}';
};

export type DeleteAssetObservationErrors = {
    /**
     * The observation could not be found
     */
    404: unknown;
};

export type DeleteAssetObservationResponses = {
    /**
     * The observation has been successfully deleted
     */
    200: unknown;
};

export type GetAssetObservationByIdData = {
    body?: never;
    path: {
        /**
         * The ID of the asset
         */
        assetId: string;
        /**
         * The ID of the observation
         */
        id: string;
    };
    query?: never;
    url: '/assets/{assetId}/observations/{id}';
};

export type GetAssetObservationByIdErrors = {
    /**
     * Observation not found
     */
    404: unknown;
};

export type GetAssetObservationByIdResponses = {
    /**
     * The observation has been successfully retrieved
     */
    200: AssetObservation;
};

export type GetAssetObservationByIdResponse = GetAssetObservationByIdResponses[keyof GetAssetObservationByIdResponses];

export type GetCalendarEntriesData = {
    body?: never;
    path: {
        /**
         * The ID of the asset
         */
        assetId: string;
    };
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page
         */
        limit?: number;
    };
    url: '/assets/{assetId}/calendar-entries';
};

export type GetCalendarEntriesResponses = {
    /**
     * The calendar entries have been successfully retrieved
     */
    200: Array<CalendarEntry>;
};

export type GetCalendarEntriesResponse = GetCalendarEntriesResponses[keyof GetCalendarEntriesResponses];

export type CreateCalendarEntryData = {
    body: CreateCalendarEntry;
    path: {
        /**
         * The ID of the asset
         */
        assetId: string;
    };
    query?: never;
    url: '/assets/{assetId}/calendar-entries';
};

export type CreateCalendarEntryErrors = {
    /**
     * Invalid calendar entry data
     */
    400: unknown;
};

export type CreateCalendarEntryResponses = {
    /**
     * Calendar entry created successfully
     */
    201: CalendarEntry;
};

export type CreateCalendarEntryResponse = CreateCalendarEntryResponses[keyof CreateCalendarEntryResponses];

export type GetCalendarEntryByIdData = {
    body?: never;
    path: {
        /**
         * The ID of the asset
         */
        assetId: string;
        /**
         * The ID of the calendar entry
         */
        id: string;
    };
    query?: never;
    url: '/assets/{assetId}/calendar-entries/{id}';
};

export type GetCalendarEntryByIdErrors = {
    /**
     * Calendar entry not found
     */
    404: unknown;
};

export type GetCalendarEntryByIdResponses = {
    /**
     * The calendar entry has been successfully retrieved
     */
    200: CalendarEntry;
};

export type GetCalendarEntryByIdResponse = GetCalendarEntryByIdResponses[keyof GetCalendarEntryByIdResponses];

export type GetTenantUsersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/tenant-users';
};

export type GetTenantUsersErrors = {
    /**
     * Unauthorized access
     */
    401: unknown;
};

export type GetTenantUsersResponses = {
    /**
     * The tenant users have been successfully retrieved
     */
    200: Array<TenantUser>;
};

export type GetTenantUsersResponse = GetTenantUsersResponses[keyof GetTenantUsersResponses];

export type CreateTenantUserData = {
    body: CreateTenantUser;
    path?: never;
    query?: never;
    url: '/auth/tenant-users';
};

export type CreateTenantUserErrors = {
    /**
     * The tenant user could not be created
     */
    400: unknown;
    /**
     * The tenant user could not be found
     */
    404: unknown;
};

export type CreateTenantUserResponses = {
    /**
     * The tenant user has been successfully created
     */
    201: TenantUser;
};

export type CreateTenantUserResponse = CreateTenantUserResponses[keyof CreateTenantUserResponses];

export type DeleteTenantUserData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/auth/tenant-users/{id}';
};

export type DeleteTenantUserErrors = {
    /**
     * Unauthorized access
     */
    401: unknown;
    /**
     * The tenant user could not be found
     */
    404: unknown;
};

export type DeleteTenantUserResponses = {
    /**
     * The tenant user has been successfully deleted
     */
    200: unknown;
};

export type GetTenantUserByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/auth/tenant-users/{id}';
};

export type GetTenantUserByIdErrors = {
    /**
     * Unauthorized access
     */
    401: unknown;
    /**
     * The tenant user could not be found
     */
    404: unknown;
};

export type GetTenantUserByIdResponses = {
    /**
     * The tenant user has been successfully retrieved
     */
    200: TenantUser;
};

export type GetTenantUserByIdResponse = GetTenantUserByIdResponses[keyof GetTenantUserByIdResponses];

export type UpdateTenantUserData = {
    body: UpdateTenantUser;
    path: {
        id: string;
    };
    query?: never;
    url: '/auth/tenant-users/{id}';
};

export type UpdateTenantUserErrors = {
    /**
     * The tenant user could not be updated
     */
    400: unknown;
    /**
     * Unauthorized access
     */
    401: unknown;
    /**
     * The tenant user could not be found
     */
    404: unknown;
};

export type UpdateTenantUserResponses = {
    /**
     * The tenant user has been successfully updated
     */
    200: TenantUser;
};

export type UpdateTenantUserResponse = UpdateTenantUserResponses[keyof UpdateTenantUserResponses];

export type ClearSandboxData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/sandbox/clear';
};

export type ClearSandboxResponses = {
    /**
     * The sandbox data has been successfully cleared
     */
    200: unknown;
};

export type CreateUploadUrlData = {
    body: S3UploadObject;
    path?: never;
    query?: never;
    url: '/s3/upload-url';
};

export type CreateUploadUrlResponses = {
    /**
     * Returns a presigned URL and S3 object ID for uploading a file
     */
    201: S3UploadResponse;
};

export type CreateUploadUrlResponse = CreateUploadUrlResponses[keyof CreateUploadUrlResponses];

export type GetObjectData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/s3/object/{id}';
};

export type GetObjectResponses = {
    /**
     * Returns a S3 object by its ID
     */
    200: S3Object;
};

export type GetObjectResponse = GetObjectResponses[keyof GetObjectResponses];

export type GetCanvasTemplateData = {
    body?: never;
    path: {
        /**
         * The ID of the Canvas Template to find
         */
        id: unknown;
    };
    query?: never;
    url: '/canvas-templates/{id}';
};

export type GetCanvasTemplateResponses = {
    /**
     * The Canvas Template was successfully obtained.
     */
    200: CanvasTemplate;
};

export type GetCanvasTemplateResponse = GetCanvasTemplateResponses[keyof GetCanvasTemplateResponses];

export type CreateCanvasTemplateData = {
    body: CreateCanvasTemplate;
    path?: never;
    query?: never;
    url: '/canvas-templates';
};

export type CreateCanvasTemplateResponses = {
    /**
     * The Canvas Template that was created.
     */
    200: CanvasTemplate;
};

export type CreateCanvasTemplateResponse = CreateCanvasTemplateResponses[keyof CreateCanvasTemplateResponses];

export type RenderCanvasTemplateData = {
    body: {
        [key: string]: string | number | boolean | {
            [key: string]: unknown;
        } | Array<unknown>;
    };
    path: {
        /**
         * The ID of the Canvas Template to render
         */
        id: string;
    };
    query?: never;
    url: '/canvas-templates/{id}/render';
};

export type RenderCanvasTemplateResponses = {
    /**
     * Instantiation of the Canvas Template as a Canvas Template Instance
     */
    200: CanvasTemplateInstance;
};

export type RenderCanvasTemplateResponse = RenderCanvasTemplateResponses[keyof RenderCanvasTemplateResponses];

export type GetLinksData = {
    body?: never;
    path?: never;
    query: {
        offset: number;
        limit: number;
    };
    url: '/links';
};

export type GetLinksResponses = {
    /**
     * The Links were found and returned.
     */
    200: Array<LinkConfiguration>;
};

export type GetLinksResponse = GetLinksResponses[keyof GetLinksResponses];

export type CreateLinkData = {
    body: CreateLink;
    path?: never;
    query?: never;
    url: '/links';
};

export type CreateLinkResponses = {
    /**
     * The Link was created successfully.
     */
    201: LinkConfiguration;
};

export type CreateLinkResponse = CreateLinkResponses[keyof CreateLinkResponses];

export type DeleteLinkData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/links/{id}';
};

export type DeleteLinkResponses = {
    /**
     * The Link was deleted successfully.
     */
    200: unknown;
};

export type GetLinkData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/links/{id}';
};

export type GetLinkResponses = {
    /**
     * The Link was found and returned.
     */
    200: LinkConfiguration;
};

export type GetLinkResponse = GetLinkResponses[keyof GetLinkResponses];

export type LinkResolverControllerResolveData = {
    body?: never;
    path: {
        path: string;
    };
    query: {
        linkType: string;
    };
    url: '/link-resolver/{path}';
};

export type LinkResolverControllerResolveResponses = {
    200: unknown;
};

export type GetCredentialIssuerProfilesData = {
    body?: never;
    path?: never;
    query: {
        page: number;
        limit: number;
    };
    url: '/credential-issuer-profiles';
};

export type GetCredentialIssuerProfilesResponses = {
    /**
     * Credential issuer profiles fetched successfully
     */
    200: PaginatedCredentialIssuerProfiles;
};

export type GetCredentialIssuerProfilesResponse = GetCredentialIssuerProfilesResponses[keyof GetCredentialIssuerProfilesResponses];

export type CreateCredentialIssuerProfileData = {
    body: CreateCredentialIssuerProfile;
    path?: never;
    query?: never;
    url: '/credential-issuer-profiles';
};

export type CreateCredentialIssuerProfileErrors = {
    /**
     * Invalid request
     */
    400: unknown;
};

export type CreateCredentialIssuerProfileResponses = {
    /**
     * Credential issuer profile created successfully
     */
    201: CredentialIssuerProfile;
};

export type CreateCredentialIssuerProfileResponse = CreateCredentialIssuerProfileResponses[keyof CreateCredentialIssuerProfileResponses];

export type DeleteCredentialIssuerProfileData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/credential-issuer-profiles/{id}';
};

export type DeleteCredentialIssuerProfileResponses = {
    /**
     * Credential issuer profile deleted successfully
     */
    204: void;
};

export type DeleteCredentialIssuerProfileResponse = DeleteCredentialIssuerProfileResponses[keyof DeleteCredentialIssuerProfileResponses];

export type GetCredentialIssuerProfileData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/credential-issuer-profiles/{id}';
};

export type GetCredentialIssuerProfileErrors = {
    /**
     * Credential issuer profile not found
     */
    403: unknown;
};

export type GetCredentialIssuerProfileResponses = {
    /**
     * Credential issuer profile fetched successfully
     */
    200: CredentialIssuerProfile;
};

export type GetCredentialIssuerProfileResponse = GetCredentialIssuerProfileResponses[keyof GetCredentialIssuerProfileResponses];

export type GetCredentialData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/credentials/{id}';
};

export type GetCredentialResponses = {
    200: unknown;
};

export type IssueCredentialData = {
    body: IssueCredentialRequest;
    path?: never;
    query?: never;
    url: '/credentials/issue';
};

export type IssueCredentialErrors = {
    /**
     * Invalid request
     */
    400: unknown;
};

export type IssueCredentialResponses = {
    /**
     * Credential successfully issued!
     */
    201: IssueCredentialResponse;
};

export type IssueCredentialResponse2 = IssueCredentialResponses[keyof IssueCredentialResponses];

export type VerifyCredentialData = {
    body: VerifyCredentialRequest;
    path?: never;
    query?: never;
    url: '/credentials/verify';
};

export type VerifyCredentialErrors = {
    /**
     * Invalid request
     */
    400: unknown;
};

export type VerifyCredentialResponses = {
    /**
     * Verifiable Credential successfully verified!
     */
    200: VerifyCredentialResponse;
};

export type VerifyCredentialResponse2 = VerifyCredentialResponses[keyof VerifyCredentialResponses];

export type GetCustodyCommissionsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page
         */
        limit?: number;
    };
    url: '/custody-commissions';
};

export type GetCustodyCommissionsResponses = {
    /**
     * The custody commissions have been successfully retrieved
     */
    200: Array<CustodyCommission>;
};

export type GetCustodyCommissionsResponse = GetCustodyCommissionsResponses[keyof GetCustodyCommissionsResponses];

export type CreateCustodyCommissionData = {
    body: CreateCustodyCommission;
    path?: never;
    query?: never;
    url: '/custody-commissions';
};

export type CreateCustodyCommissionErrors = {
    /**
     * The custody commission could not be created
     */
    400: unknown;
};

export type CreateCustodyCommissionResponses = {
    /**
     * The custody commission has been successfully created
     */
    201: CustodyCommission;
};

export type CreateCustodyCommissionResponse = CreateCustodyCommissionResponses[keyof CreateCustodyCommissionResponses];

export type DeleteCustodyCommissionData = {
    body?: never;
    path: {
        /**
         * The ID of the custody commission to delete
         */
        id: string;
    };
    query?: never;
    url: '/custody-commissions/{id}';
};

export type DeleteCustodyCommissionErrors = {
    /**
     * The custody commission could not be found
     */
    404: unknown;
};

export type DeleteCustodyCommissionResponses = {
    /**
     * The custody commission has been successfully deleted
     */
    204: void;
};

export type DeleteCustodyCommissionResponse = DeleteCustodyCommissionResponses[keyof DeleteCustodyCommissionResponses];

export type GetCustodyCommissionData = {
    body?: never;
    path: {
        /**
         * The ID of the custody commission to get
         */
        id: string;
    };
    query?: never;
    url: '/custody-commissions/{id}';
};

export type GetCustodyCommissionErrors = {
    /**
     * The custody commission could not be found
     */
    404: unknown;
};

export type GetCustodyCommissionResponses = {
    /**
     * The custody commission has been successfully retrieved
     */
    200: CustodyCommission;
};

export type GetCustodyCommissionResponse = GetCustodyCommissionResponses[keyof GetCustodyCommissionResponses];

export type UpdateCustodyCommissionData = {
    body?: never;
    path: {
        /**
         * The ID of the custody commission to update
         */
        id: string;
    };
    query?: never;
    url: '/custody-commissions/{id}';
};

export type UpdateCustodyCommissionErrors = {
    /**
     * The custody commission could not be found
     */
    404: unknown;
};

export type UpdateCustodyCommissionResponses = {
    /**
     * The custody commission has been successfully updated
     */
    200: CustodyCommission;
};

export type UpdateCustodyCommissionResponse = UpdateCustodyCommissionResponses[keyof UpdateCustodyCommissionResponses];

export type ConsumeCustodyCommissionData = {
    body: ConsumeCustodyCommission;
    path?: never;
    query?: never;
    url: '/custody-commissions/consume';
};

export type ConsumeCustodyCommissionErrors = {
    /**
     * The custody commission could not be found or has already been consumed
     */
    404: unknown;
};

export type ConsumeCustodyCommissionResponses = {
    /**
     * The custody commission has been successfully consumed
     */
    200: CustodyCommission;
};

export type ConsumeCustodyCommissionResponse = ConsumeCustodyCommissionResponses[keyof ConsumeCustodyCommissionResponses];

export type GetDidsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page
         */
        limit?: number;
    };
    url: '/did';
};

export type GetDidsResponses = {
    /**
     * DIDs fetched successfully
     */
    200: PaginatedDids;
};

export type GetDidsResponse = GetDidsResponses[keyof GetDidsResponses];

export type CreateDidData = {
    body: CreateDid;
    path?: never;
    query?: never;
    url: '/did';
};

export type CreateDidErrors = {
    /**
     * Invalid request
     */
    400: unknown;
};

export type CreateDidResponses = {
    /**
     * DID created successfully
     */
    201: Did;
};

export type CreateDidResponse = CreateDidResponses[keyof CreateDidResponses];

export type DeleteDidData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/did/{id}';
};

export type DeleteDidResponses = {
    /**
     * DID deleted successfully
     */
    204: void;
};

export type DeleteDidResponse = DeleteDidResponses[keyof DeleteDidResponses];

export type GetDidData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/did/{id}';
};

export type GetDidErrors = {
    /**
     * DID not found
     */
    403: unknown;
};

export type GetDidResponses = {
    /**
     * DID fetched successfully
     */
    200: Did;
};

export type GetDidResponse = GetDidResponses[keyof GetDidResponses];

export type GetTrustGraphData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/discovery/trust-graph/{id}';
};

export type GetTrustGraphErrors = {
    /**
     * The trust graph was not found
     */
    403: unknown;
};

export type GetTrustGraphResponses = {
    /**
     * The trust graph
     */
    200: TrustGraph;
};

export type GetTrustGraphResponse = GetTrustGraphResponses[keyof GetTrustGraphResponses];

export type TraverseTrustGraphData = {
    body: TraverseTrustGraph;
    path?: never;
    query?: never;
    url: '/discovery/trust-graph/traverse';
};

export type TraverseTrustGraphResponses = {
    /**
     * The trust graph traversed.
     */
    200: TrustGraph;
};

export type TraverseTrustGraphResponse = TraverseTrustGraphResponses[keyof TraverseTrustGraphResponses];

export type GetPolicyByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/policies/{id}';
};

export type GetPolicyByIdResponses = {
    /**
     * The policy was successfully retrieved.
     */
    200: Policy;
};

export type GetPolicyByIdResponse = GetPolicyByIdResponses[keyof GetPolicyByIdResponses];

export type GetPoliciesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page
         */
        limit?: number;
        /**
         * The ID of the parent location
         */
        parentLocationId?: string;
    };
    url: '/policies';
};

export type GetPoliciesResponses = {
    /**
     * The locations have been successfully retrieved
     */
    200: Array<Policy>;
};

export type GetPoliciesResponse = GetPoliciesResponses[keyof GetPoliciesResponses];

export type CreateDppData = {
    body: CreateDppDto;
    path?: never;
    query?: never;
    url: '/dpp';
};

export type CreateDppResponses = {
    /**
     * DPP created successfully
     */
    200: Dpp;
};

export type CreateDppResponse = CreateDppResponses[keyof CreateDppResponses];

export type DeleteDppData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/dpp/{id}';
};

export type DeleteDppResponses = {
    /**
     * DPP deleted successfully
     */
    200: unknown;
};

export type GetDppData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/dpp/{id}';
};

export type GetDppResponses = {
    /**
     * DPP retrieved successfully
     */
    200: Dpp;
};

export type GetDppResponse = GetDppResponses[keyof GetDppResponses];

export type GetEventSchemasData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page
         */
        limit?: number;
    };
    url: '/event-schemas';
};

export type GetEventSchemasResponses = {
    /**
     * The event schemas have been successfully retrieved
     */
    200: Array<EventSchema>;
};

export type GetEventSchemasResponse = GetEventSchemasResponses[keyof GetEventSchemasResponses];

export type SetEventSchemaData = {
    body: SetEventSchema;
    path?: never;
    query?: never;
    url: '/event-schemas';
};

export type SetEventSchemaErrors = {
    /**
     * Invalid request
     */
    400: unknown;
};

export type SetEventSchemaResponses = {
    /**
     * Event schema created successfully
     */
    201: EventSchema;
};

export type SetEventSchemaResponse = SetEventSchemaResponses[keyof SetEventSchemaResponses];

export type DeleteEventSchemaData = {
    body?: never;
    path: {
        code: string;
    };
    query?: never;
    url: '/event-schemas/{code}';
};

export type DeleteEventSchemaErrors = {
    /**
     * Event schema not found
     */
    404: unknown;
};

export type DeleteEventSchemaResponses = {
    /**
     * Event schema deleted successfully
     */
    200: unknown;
};

export type GetEventSchemaData = {
    body?: never;
    path: {
        code: string;
    };
    query?: never;
    url: '/event-schemas/{code}';
};

export type GetEventSchemaErrors = {
    /**
     * Event schema not found
     */
    404: unknown;
};

export type GetEventSchemaResponses = {
    /**
     * Event schema retrieved successfully
     */
    200: EventSchema;
};

export type GetEventSchemaResponse = GetEventSchemaResponses[keyof GetEventSchemaResponses];

export type CreateEventExtensionSchemaData = {
    body: SetEventExtensionSchema;
    path: {
        code: string;
    };
    query?: never;
    url: '/event-schemas/{code}/extension-schemas';
};

export type CreateEventExtensionSchemaResponses = {
    201: unknown;
};

export type CreateIlmdSchemaData = {
    body: SetIlmdSchema;
    path: {
        code: string;
    };
    query?: never;
    url: '/event-schemas/{code}/ilmd-schemas';
};

export type CreateIlmdSchemaResponses = {
    201: unknown;
};

export type CreateEventFormData = {
    body: SetEventForm;
    path: {
        code: string;
    };
    query?: never;
    url: '/event-schemas/{code}/event-forms';
};

export type CreateEventFormResponses = {
    201: unknown;
};

export type GetAppFrameData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/engine/app/frame';
};

export type GetAppFrameResponses = {
    /**
     * The App Frame has been successfully retrieved
     */
    200: AppFrame;
};

export type GetAppFrameResponse = GetAppFrameResponses[keyof GetAppFrameResponses];

export type SetAppFrameData = {
    body: SetAppFrame;
    path?: never;
    query?: never;
    url: '/engine/app/frame';
};

export type SetAppFrameResponses = {
    /**
     * The App Frame has been successfully updated
     */
    200: AppFrame;
};

export type SetAppFrameResponse = SetAppFrameResponses[keyof SetAppFrameResponses];

export type GetEventsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page
         */
        limit?: number;
    };
    url: '/events';
};

export type GetEventsResponses = {
    /**
     * The events have been successfully retrieved
     */
    200: Array<Event>;
};

export type GetEventsResponse = GetEventsResponses[keyof GetEventsResponses];

export type CreateEventData = {
    body: CreateEvent;
    path?: never;
    query?: never;
    url: '/events';
};

export type CreateEventErrors = {
    /**
     * The location could not be created
     */
    400: unknown;
    /**
     * The parent location could not be found
     */
    404: unknown;
};

export type CreateEventResponses = {
    /**
     * The location has been successfully created
     */
    201: Event;
};

export type CreateEventResponse = CreateEventResponses[keyof CreateEventResponses];

export type DeleteEventData = {
    body?: never;
    path: {
        /**
         * The ID of the event to delete
         */
        id: string;
    };
    query?: never;
    url: '/events/{id}';
};

export type DeleteEventErrors = {
    /**
     * The event could not be found
     */
    404: unknown;
};

export type DeleteEventResponses = {
    /**
     * The event has been successfully deleted
     */
    200: unknown;
};

export type GetEventData = {
    body?: never;
    path: {
        /**
         * The ID of the event to get
         */
        id: string;
    };
    query?: never;
    url: '/events/{id}';
};

export type GetEventErrors = {
    /**
     * The event could not be found
     */
    404: unknown;
};

export type GetEventResponses = {
    /**
     * The event has been successfully retrieved
     */
    200: Event;
};

export type GetEventResponse = GetEventResponses[keyof GetEventResponses];

export type IdentifierControllerIlmdData = {
    body?: never;
    path: {
        /**
         * The id of the identifier
         */
        id: string;
    };
    query?: never;
    url: '/identifiers/{id}/ilmd';
};

export type IdentifierControllerIlmdResponses = {
    /**
     * The ILMD for the identifier
     */
    200: {
        [key: string]: string | number | boolean | {
            [key: string]: unknown;
        } | Array<unknown>;
    };
};

export type IdentifierControllerIlmdResponse = IdentifierControllerIlmdResponses[keyof IdentifierControllerIlmdResponses];

export type GetFaoCodesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/fao-codes';
};

export type GetFaoCodesResponses = {
    /**
     * All FAO codes
     */
    200: unknown;
};

export type GetLocationsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page
         */
        limit?: number;
        /**
         * The ID of the parent location
         */
        parentLocationId?: string;
    };
    url: '/locations';
};

export type GetLocationsResponses = {
    /**
     * The locations have been successfully retrieved
     */
    200: Array<Location>;
};

export type GetLocationsResponse = GetLocationsResponses[keyof GetLocationsResponses];

export type CreateLocationData = {
    body: CreateLocation;
    path?: never;
    query?: never;
    url: '/locations';
};

export type CreateLocationErrors = {
    /**
     * The location could not be created
     */
    400: unknown;
    /**
     * The parent location could not be found
     */
    404: unknown;
};

export type CreateLocationResponses = {
    /**
     * The location has been successfully created
     */
    201: Location;
};

export type CreateLocationResponse = CreateLocationResponses[keyof CreateLocationResponses];

export type GetLocationData = {
    body?: never;
    path: {
        /**
         * The ID of the location to get
         */
        id: string;
    };
    query?: never;
    url: '/locations/{id}';
};

export type GetLocationErrors = {
    /**
     * The location could not be found
     */
    404: unknown;
};

export type GetLocationResponses = {
    /**
     * The location has been successfully retrieved
     */
    200: Location;
};

export type GetLocationResponse = GetLocationResponses[keyof GetLocationResponses];

export type GetLocationByIdentifierData = {
    body?: never;
    path: {
        /**
         * The identifier of the location
         */
        identifier: string;
    };
    query?: never;
    url: '/locations/by-identifier/{identifier}';
};

export type GetLocationByIdentifierErrors = {
    /**
     * The location could not be found
     */
    404: unknown;
};

export type GetLocationByIdentifierResponses = {
    /**
     * The location has been successfully retrieved
     */
    200: Location;
};

export type GetLocationByIdentifierResponse = GetLocationByIdentifierResponses[keyof GetLocationByIdentifierResponses];

export type GetLocationInventoryData = {
    body?: never;
    path: {
        /**
         * The ID of the location to get inventory for
         */
        id: string;
    };
    query?: never;
    url: '/locations/{id}/inventory';
};

export type GetLocationInventoryErrors = {
    /**
     * The location could not be found
     */
    404: unknown;
};

export type GetLocationInventoryResponses = {
    /**
     * The location inventory has been successfully retrieved
     */
    200: LocationInventory;
};

export type GetLocationInventoryResponse = GetLocationInventoryResponses[keyof GetLocationInventoryResponses];

export type GetLocationSchemasData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page
         */
        limit?: number;
    };
    url: '/location-schemas';
};

export type GetLocationSchemasResponses = {
    /**
     * The location schemas have been successfully retrieved
     */
    200: Array<LocationSchema>;
};

export type GetLocationSchemasResponse = GetLocationSchemasResponses[keyof GetLocationSchemasResponses];

export type CreateLocationSchemaData = {
    body: CreateLocationSchema;
    path?: never;
    query?: never;
    url: '/location-schemas';
};

export type CreateLocationSchemaErrors = {
    /**
     * Invalid request
     */
    400: unknown;
};

export type CreateLocationSchemaResponses = {
    /**
     * Location schema created successfully
     */
    201: LocationSchema;
};

export type CreateLocationSchemaResponse = CreateLocationSchemaResponses[keyof CreateLocationSchemaResponses];

export type DeleteLocationSchemaData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/location-schemas/{id}';
};

export type DeleteLocationSchemaErrors = {
    /**
     * Location schema not found
     */
    404: unknown;
};

export type DeleteLocationSchemaResponses = {
    /**
     * Location schema deleted successfully
     */
    200: unknown;
};

export type GetLocationSchemaData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/location-schemas/{id}';
};

export type GetLocationSchemaErrors = {
    /**
     * Location schema not found
     */
    404: unknown;
};

export type GetLocationSchemaResponses = {
    /**
     * Location schema retrieved successfully
     */
    200: LocationSchema;
};

export type GetLocationSchemaResponse = GetLocationSchemaResponses[keyof GetLocationSchemaResponses];

export type CreateLocationExtensionSchemaData = {
    body: CreateLocationExtensionSchema;
    path: {
        id: string;
    };
    query?: never;
    url: '/location-schemas/{id}/extension-schemas';
};

export type CreateLocationExtensionSchemaResponses = {
    201: unknown;
};

export type GetPartnersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page
         */
        limit?: number;
    };
    url: '/partners';
};

export type GetPartnersResponses = {
    /**
     * The partners have been successfully retrieved.
     */
    200: Array<Partner>;
};

export type GetPartnersResponse = GetPartnersResponses[keyof GetPartnersResponses];

export type CreatePartnerData = {
    body: CreatePartner;
    path?: never;
    query?: never;
    url: '/partners';
};

export type CreatePartnerErrors = {
    /**
     * The partner could not be created.
     */
    400: unknown;
};

export type CreatePartnerResponses = {
    /**
     * The partner has been successfully created.
     */
    201: Partner;
};

export type CreatePartnerResponse = CreatePartnerResponses[keyof CreatePartnerResponses];

export type DeletePartnerData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/partners/{id}';
};

export type DeletePartnerResponses = {
    /**
     * The partner has been successfully deleted.
     */
    200: unknown;
};

export type GetPartnerData = {
    body?: never;
    path: {
        /**
         * The ID of the partner to get
         */
        id: string;
    };
    query?: never;
    url: '/partners/{id}';
};

export type GetPartnerErrors = {
    /**
     * The partner could not be found.
     */
    404: unknown;
};

export type GetPartnerResponses = {
    /**
     * The partner has been successfully retrieved.
     */
    200: Partner;
};

export type GetPartnerResponse = GetPartnerResponses[keyof GetPartnerResponses];

export type GetPartnerSchemasData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page
         */
        limit?: number;
    };
    url: '/partner-schemas';
};

export type GetPartnerSchemasResponses = {
    /**
     * The partner schemas have been successfully retrieved
     */
    200: Array<PartnerSchema>;
};

export type GetPartnerSchemasResponse = GetPartnerSchemasResponses[keyof GetPartnerSchemasResponses];

export type CreatePartnerSchemaData = {
    body: CreatePartnerSchema;
    path?: never;
    query?: never;
    url: '/partner-schemas';
};

export type CreatePartnerSchemaErrors = {
    /**
     * Invalid request
     */
    400: unknown;
};

export type CreatePartnerSchemaResponses = {
    /**
     * Partner schema created successfully
     */
    201: PartnerSchema;
};

export type CreatePartnerSchemaResponse = CreatePartnerSchemaResponses[keyof CreatePartnerSchemaResponses];

export type GetPartnerSchemaByCodeData = {
    body?: never;
    path: {
        code: string;
    };
    query?: never;
    url: '/partner-schemas/{code}';
};

export type GetPartnerSchemaByCodeErrors = {
    /**
     * Partner schema not found
     */
    404: unknown;
};

export type GetPartnerSchemaByCodeResponses = {
    /**
     * Partner schema retrieved successfully
     */
    200: PartnerSchema;
};

export type GetPartnerSchemaByCodeResponse = GetPartnerSchemaByCodeResponses[keyof GetPartnerSchemaByCodeResponses];

export type DeletePartnerSchemaData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/partner-schemas/{id}';
};

export type DeletePartnerSchemaErrors = {
    /**
     * Partner schema not found
     */
    404: unknown;
};

export type DeletePartnerSchemaResponses = {
    /**
     * Partner schema deleted successfully
     */
    200: unknown;
};

export type GetTradeItemsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page number (1-based)
         */
        page?: number;
        /**
         * Number of items per page
         */
        limit?: number;
    };
    url: '/trade-items';
};

export type GetTradeItemsResponses = {
    /**
     * The trade items have been successfully retrieved
     */
    200: Array<TradeItem>;
};

export type GetTradeItemsResponse = GetTradeItemsResponses[keyof GetTradeItemsResponses];

export type CreateTradeItemData = {
    body: CreateTradeItem;
    path?: never;
    query?: never;
    url: '/trade-items';
};

export type CreateTradeItemErrors = {
    /**
     * The trade item could not be created
     */
    400: unknown;
};

export type CreateTradeItemResponses = {
    /**
     * The trade item has been successfully created
     */
    201: TradeItem;
};

export type CreateTradeItemResponse = CreateTradeItemResponses[keyof CreateTradeItemResponses];

export type DeleteTradeItemData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/trade-items/{id}';
};

export type DeleteTradeItemResponses = {
    /**
     * The trade item has been successfully deleted
     */
    200: unknown;
};

export type GetTradeItemData = {
    body?: never;
    path: {
        /**
         * The ID of the trade item to get
         */
        id: string;
    };
    query?: never;
    url: '/trade-items/{id}';
};

export type GetTradeItemErrors = {
    /**
     * The trade item could not be found
     */
    404: unknown;
};

export type GetTradeItemResponses = {
    /**
     * The trade item has been successfully retrieved
     */
    200: TradeItem;
};

export type GetTradeItemResponse = GetTradeItemResponses[keyof GetTradeItemResponses];

export type GetTradeItemByIdentifierData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The identifier of the trade item. Can be either a resolver URL (https://truststack.link/class/PREFIX.REF) or an internal identifier (format: {prefix}.{referenceNumber} or {prefix}.{referenceNumber}.{batchNumber})
         */
        identifier: string;
    };
    url: '/trade-items/by-identifier';
};

export type GetTradeItemByIdentifierErrors = {
    /**
     * The trade item could not be found
     */
    404: unknown;
};

export type GetTradeItemByIdentifierResponses = {
    /**
     * The trade item has been successfully retrieved
     */
    200: TradeItem;
};

export type GetTradeItemByIdentifierResponse = GetTradeItemByIdentifierResponses[keyof GetTradeItemByIdentifierResponses];

export type GetTradeItemSchemasData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The page number to get
         */
        page?: number;
        /**
         * The number of items to get
         */
        limit?: number;
    };
    url: '/trade-item-schemas';
};

export type GetTradeItemSchemasResponses = {
    /**
     * The trade item schemas have been successfully retrieved
     */
    200: Array<TradeItemSchema>;
};

export type GetTradeItemSchemasResponse = GetTradeItemSchemasResponses[keyof GetTradeItemSchemasResponses];

export type CreateTradeItemSchemaData = {
    body: CreateTradeItemSchema;
    path?: never;
    query?: never;
    url: '/trade-item-schemas';
};

export type CreateTradeItemSchemaResponses = {
    /**
     * The trade item schema has been successfully created
     */
    201: TradeItemSchema;
};

export type CreateTradeItemSchemaResponse = CreateTradeItemSchemaResponses[keyof CreateTradeItemSchemaResponses];

export type GetTradeItemSchemaData = {
    body?: never;
    path: {
        /**
         * The code of the trade item schema
         */
        code: string;
    };
    query?: never;
    url: '/trade-item-schemas/{code}';
};

export type GetTradeItemSchemaResponses = {
    /**
     * The trade item schema has been successfully retrieved
     */
    200: TradeItemSchema;
};

export type GetTradeItemSchemaResponse = GetTradeItemSchemaResponses[keyof GetTradeItemSchemaResponses];

export type DeleteTradeItemSchemaData = {
    body?: never;
    path: {
        /**
         * The id of the trade item schema
         */
        id: string;
    };
    query?: never;
    url: '/trade-item-schemas/{id}';
};

export type DeleteTradeItemSchemaResponses = {
    /**
     * The trade item schema has been successfully deleted
     */
    200: TradeItemSchema;
};

export type DeleteTradeItemSchemaResponse = DeleteTradeItemSchemaResponses[keyof DeleteTradeItemSchemaResponses];

export type CreateTradeItemExtensionSchemaData = {
    body: CreateTradeItemExtensionSchema;
    path: {
        id: string;
    };
    query?: never;
    url: '/trade-item-schemas/{id}/extension-schemas';
};

export type CreateTradeItemExtensionSchemaResponses = {
    201: unknown;
};

export type GetIconsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/icons';
};

export type GetIconsResponses = {
    /**
     * The icons have been successfully retrieved
     */
    200: Array<string>;
};

export type GetIconsResponse = GetIconsResponses[keyof GetIconsResponses];

export type CreateOrganizationData = {
    body: CreateOrganization;
    path?: never;
    query?: never;
    url: '/organizations';
};

export type CreateOrganizationErrors = {
    /**
     * Invalid request
     */
    400: unknown;
};

export type CreateOrganizationResponses = {
    /**
     * Organization created successfully
     */
    201: Organization;
};

export type CreateOrganizationResponse = CreateOrganizationResponses[keyof CreateOrganizationResponses];

export type DeleteOrganizationData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/organizations/{id}';
};

export type DeleteOrganizationErrors = {
    /**
     * Organization not found
     */
    404: unknown;
};

export type DeleteOrganizationResponses = {
    /**
     * Organization deleted successfully
     */
    200: unknown;
};

export type GetOrganizationData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/organizations/{id}';
};

export type GetOrganizationErrors = {
    /**
     * Organization not found
     */
    404: unknown;
};

export type GetOrganizationResponses = {
    /**
     * Organization retrieved successfully
     */
    200: Organization;
};

export type GetOrganizationResponse = GetOrganizationResponses[keyof GetOrganizationResponses];

export type UpdateOrganizationData = {
    body: UpdateOrganization;
    path: {
        id: string;
    };
    query?: never;
    url: '/organizations/{id}';
};

export type UpdateOrganizationErrors = {
    /**
     * Invalid request
     */
    400: unknown;
    /**
     * Organization not found
     */
    404: unknown;
};

export type UpdateOrganizationResponses = {
    /**
     * Organization updated successfully
     */
    200: Organization;
};

export type UpdateOrganizationResponse = UpdateOrganizationResponses[keyof UpdateOrganizationResponses];

export type GetEventsByIdentifierData = {
    body?: never;
    path: {
        /**
         * The identifier to get events for
         */
        identifier: string;
    };
    query?: never;
    url: '/provenance/{identifier}';
};

export type GetEventsByIdentifierErrors = {
    /**
     * No events found for the provided identifier
     */
    404: unknown;
};

export type GetEventsByIdentifierResponses = {
    /**
     * The events have been successfully retrieved
     */
    200: Array<Event>;
};

export type GetEventsByIdentifierResponse = GetEventsByIdentifierResponses[keyof GetEventsByIdentifierResponses];

export type RenderTrustGraphData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/render/discovery/trust-graph/{id}';
};

export type RenderTrustGraphResponses = {
    200: TrustGraphScreen;
};

export type RenderTrustGraphResponse = RenderTrustGraphResponses[keyof RenderTrustGraphResponses];

export type CreateSchemaData = {
    body: CreateSchema;
    path?: never;
    query?: never;
    url: '/schemas';
};

export type CreateSchemaErrors = {
    /**
     * Invalid request
     */
    400: unknown;
};

export type CreateSchemaResponses = {
    /**
     * Schema created successfully
     */
    201: Schema;
};

export type CreateSchemaResponse = CreateSchemaResponses[keyof CreateSchemaResponses];

export type DeleteSchemaData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/schemas/{id}';
};

export type DeleteSchemaErrors = {
    /**
     * Schema not found
     */
    404: unknown;
};

export type DeleteSchemaResponses = {
    /**
     * Schema deleted successfully
     */
    200: unknown;
};

export type GetSchemaData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/schemas/{id}';
};

export type GetSchemaErrors = {
    /**
     * Schema not found
     */
    404: unknown;
};

export type GetSchemaResponses = {
    /**
     * Schema retrieved successfully
     */
    200: Schema;
};

export type GetSchemaResponse = GetSchemaResponses[keyof GetSchemaResponses];

export type UpdateSchemaData = {
    body: UpdateSchema;
    path: {
        id: string;
    };
    query?: never;
    url: '/schemas/{id}';
};

export type UpdateSchemaErrors = {
    /**
     * Invalid request
     */
    400: unknown;
    /**
     * Schema not found
     */
    404: unknown;
};

export type UpdateSchemaResponses = {
    /**
     * Schema updated successfully
     */
    200: Schema;
};

export type UpdateSchemaResponse = UpdateSchemaResponses[keyof UpdateSchemaResponses];