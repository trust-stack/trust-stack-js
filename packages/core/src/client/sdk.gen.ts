// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { HealthControllerGetStatusData, GetCanvasTemplateData, GetCanvasTemplateResponse, CreateCanvasTemplateData, CreateCanvasTemplateResponse, RenderCanvasTemplateData, RenderCanvasTemplateResponse, GetLinkSetsData, GetLinkSetsResponse, CreateLinkSetData, CreateLinkSetResponse, DeleteLinkSetData, GetLinkSetData, GetLinkSetResponse, UpdateLinkSetData, UpdateLinkSetResponse, GetManyExternalResolversData, CreateExternalResolverData, DeleteExternalResolverData, GetExternalResolverData, UpdateExternalResolverData, CredentialsControllerGetCredentialData, CreateOrganizationData, CreateOrganizationResponse, DeleteOrganizationData, GetOrganizationData, GetOrganizationResponse, UpdateOrganizationData, UpdateOrganizationResponse, GetDidsData, GetDidsResponse, CreateDidData, CreateDidResponse, DeleteDidData, DeleteDidResponse, GetDidData, GetDidResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Get the health status of the service
 */
export const healthControllerGetStatus = <ThrowOnError extends boolean = false>(options?: Options<HealthControllerGetStatusData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/health/status'
    });
};

/**
 * Get a Canvas Template by id.
 */
export const getCanvasTemplate = <ThrowOnError extends boolean = false>(options: Options<GetCanvasTemplateData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCanvasTemplateResponse, unknown, ThrowOnError>({
        ...options,
        url: '/canvas-templates/{id}'
    });
};

/**
 * Create a Canvas Template.
 */
export const createCanvasTemplate = <ThrowOnError extends boolean = false>(options: Options<CreateCanvasTemplateData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateCanvasTemplateResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/canvas-templates'
    });
};

/**
 * Create an instance of a Canvased Template.
 */
export const renderCanvasTemplate = <ThrowOnError extends boolean = false>(options: Options<RenderCanvasTemplateData, ThrowOnError>) => {
    return (options?.client ?? client).post<RenderCanvasTemplateResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/canvas-templates/{id}/render'
    });
};

/**
 * Get all paginated Link Sets
 */
export const getLinkSets = <ThrowOnError extends boolean = false>(options?: Options<GetLinkSetsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetLinkSetsResponse, unknown, ThrowOnError>({
        ...options,
        url: '/link-sets'
    });
};

/**
 * Create a new Link Set
 */
export const createLinkSet = <ThrowOnError extends boolean = false>(options: Options<CreateLinkSetData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateLinkSetResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/link-sets'
    });
};

/**
 * Delete a Link Set by ID
 */
export const deleteLinkSet = <ThrowOnError extends boolean = false>(options: Options<DeleteLinkSetData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/link-sets/{id}'
    });
};

/**
 * Get a Link Set by ID
 */
export const getLinkSet = <ThrowOnError extends boolean = false>(options: Options<GetLinkSetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetLinkSetResponse, unknown, ThrowOnError>({
        ...options,
        url: '/link-sets/{id}'
    });
};

/**
 * Update an existing Link Set
 */
export const updateLinkSet = <ThrowOnError extends boolean = false>(options: Options<UpdateLinkSetData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateLinkSetResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/link-sets/{id}'
    });
};

export const getManyExternalResolvers = <ThrowOnError extends boolean = false>(options?: Options<GetManyExternalResolversData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/external-resolvers'
    });
};

export const createExternalResolver = <ThrowOnError extends boolean = false>(options: Options<CreateExternalResolverData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/external-resolvers'
    });
};

export const deleteExternalResolver = <ThrowOnError extends boolean = false>(options: Options<DeleteExternalResolverData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/external-resolvers/{id}'
    });
};

export const getExternalResolver = <ThrowOnError extends boolean = false>(options: Options<GetExternalResolverData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/external-resolvers/{id}'
    });
};

export const updateExternalResolver = <ThrowOnError extends boolean = false>(options: Options<UpdateExternalResolverData, ThrowOnError>) => {
    return (options?.client ?? client).put<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/external-resolvers/{id}'
    });
};

/**
 * Retrieves a credential by its ID.
 * Retrieves a credential by its ID.
 */
export const credentialsControllerGetCredential = <ThrowOnError extends boolean = false>(options: Options<CredentialsControllerGetCredentialData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/credentials/{id}'
    });
};

/**
 * Create an organization
 */
export const createOrganization = <ThrowOnError extends boolean = false>(options: Options<CreateOrganizationData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateOrganizationResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/organizations'
    });
};

/**
 * Delete an organization
 */
export const deleteOrganization = <ThrowOnError extends boolean = false>(options: Options<DeleteOrganizationData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/organizations/{id}'
    });
};

/**
 * Get an organization
 */
export const getOrganization = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOrganizationResponse, unknown, ThrowOnError>({
        ...options,
        url: '/organizations/{id}'
    });
};

/**
 * Update an organization
 */
export const updateOrganization = <ThrowOnError extends boolean = false>(options: Options<UpdateOrganizationData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateOrganizationResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/organizations/{id}'
    });
};

/**
 * Get all DIDs for the requested organization.
 */
export const getDids = <ThrowOnError extends boolean = false>(options?: Options<GetDidsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetDidsResponse, unknown, ThrowOnError>({
        ...options,
        url: '/did'
    });
};

/**
 * Create a unique DID for the requested organization.
 */
export const createDid = <ThrowOnError extends boolean = false>(options: Options<CreateDidData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateDidResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/did'
    });
};

/**
 * Delete a DID by ID
 */
export const deleteDid = <ThrowOnError extends boolean = false>(options: Options<DeleteDidData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteDidResponse, unknown, ThrowOnError>({
        ...options,
        url: '/did/{id}'
    });
};

/**
 * Get a DID by ID
 */
export const getDid = <ThrowOnError extends boolean = false>(options: Options<GetDidData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetDidResponse, unknown, ThrowOnError>({
        ...options,
        url: '/did/{id}'
    });
};