// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { HealthCheckData, GetAssetsData, GetAssetsResponse, CreateAssetData, CreateAssetResponse, DeleteAssetData, GetAssetByIdData, GetAssetByIdResponse, UpdateAssetData, UpdateAssetResponse, GetAssetObservationsData, GetAssetObservationsResponse, CreateAssetObservationData, CreateAssetObservationResponse, DeleteAssetObservationData, GetAssetObservationByIdData, GetAssetObservationByIdResponse, GetTenantUsersData, GetTenantUsersResponse, CreateTenantUserData, CreateTenantUserResponse, DeleteTenantUserData, GetTenantUserByIdData, GetTenantUserByIdResponse, UpdateTenantUserData, UpdateTenantUserResponse, ClearSandboxData, CreateUploadUrlData, CreateUploadUrlResponse, GetObjectData, GetObjectResponse, MintBioLockData, SetBioLockData, SetBioLockResponse, GetBioLockData, GetThemesData, GetThemesResponse, CreateThemeData, CreateThemeResponse, DeleteThemeData, GetThemeData, GetThemeResponse, UpdateThemeData, UpdateThemeResponse, GetOrganizationThemeData, GetOrganizationThemeResponse, CreateOrganizationThemeData, CreateOrganizationThemeResponse, GetLinksData, GetLinksResponse, CreateLinkData, CreateLinkResponse, DeleteLinkData, GetLinkData, GetLinkResponse, LinkResolverControllerResolveData, GetCanvasTemplateData, GetCanvasTemplateResponse, CreateCanvasTemplateData, CreateCanvasTemplateResponse, RenderCanvasTemplateData, RenderCanvasTemplateResponse, GetCredentialIssuerProfilesData, GetCredentialIssuerProfilesResponse, CreateCredentialIssuerProfileData, CreateCredentialIssuerProfileResponse, DeleteCredentialIssuerProfileData, DeleteCredentialIssuerProfileResponse, GetCredentialIssuerProfileData, GetCredentialIssuerProfileResponse, GetCredentialData, IssueCredentialData, IssueCredentialResponse2, VerifyCredentialData, VerifyCredentialResponse2, GetCustodyCommissionsData, GetCustodyCommissionsResponse, CreateCustodyCommissionData, CreateCustodyCommissionResponse, DeleteCustodyCommissionData, DeleteCustodyCommissionResponse, GetCustodyCommissionData, GetCustodyCommissionResponse, UpdateCustodyCommissionData, UpdateCustodyCommissionResponse, ConsumeCustodyCommissionData, ConsumeCustodyCommissionResponse, GetDidsData, GetDidsResponse, CreateDidData, CreateDidResponse, DeleteDidData, DeleteDidResponse, GetDidData, GetDidResponse, GetTrustGraphData, GetTrustGraphResponse, TraverseTrustGraphData, TraverseTrustGraphResponse, GetPolicyByIdData, GetPolicyByIdResponse, GetPoliciesData, GetPoliciesResponse, CreateDppData, CreateDppResponse, DeleteDppData, GetDppData, GetDppResponse, GetProvenanceFormsData, GetProvenanceFormsResponse, CreateProvenanceFormData, CreateProvenanceFormResponse, DeleteProvenanceFormData, GetProvenanceFormData, GetProvenanceFormResponse, UpdateProvenanceFormData, UpdateProvenanceFormResponse, GetAppEntryOrganizationData, GetAppEntryOrganizationResponse, SetAppEntryOrganizationData, SetAppEntryOrganizationResponse, GetAppThemeOrganizationData, GetAppThemeOrganizationResponse, SetAppThemeOrganizationData, SetAppThemeOrganizationResponse, GetEventSchemasData, GetEventSchemasResponse, CreateEventSchemaData, CreateEventSchemaResponse, SetEventSchemasData, SetEventSchemasResponse, DeleteEventSchemaData, GetEventSchemaData, GetEventSchemaResponse, CreateEventExtensionSchemaData, CreateIlmdSchemaData, GetEventsData, GetEventsResponse, CreateEventData, CreateEventResponse, DeleteEventData, GetEventData, GetEventResponse, IdentifierControllerIlmdData, IdentifierControllerIlmdResponse, GetFaoCodesData, GetLocationsData, GetLocationsResponse, CreateLocationData, CreateLocationResponse, GetLocationData, GetLocationResponse, GetLocationByIdentifierData, GetLocationByIdentifierResponse, GetLocationInventoryData, GetLocationInventoryResponse, GetLocationSchemasData, GetLocationSchemasResponse, CreateLocationSchemaData, CreateLocationSchemaResponse, DeleteLocationSchemaData, GetLocationSchemaData, GetLocationSchemaResponse, CreateLocationExtensionSchemaData, GetPartnersData, GetPartnersResponse, CreatePartnerData, CreatePartnerResponse, DeletePartnerData, GetPartnerData, GetPartnerResponse, GetPartnerSchemasData, GetPartnerSchemasResponse, CreatePartnerSchemaData, CreatePartnerSchemaResponse, GetPartnerSchemaByCodeData, GetPartnerSchemaByCodeResponse, DeletePartnerSchemaData, GetTradeItemsData, GetTradeItemsResponse, CreateTradeItemData, CreateTradeItemResponse, DeleteTradeItemData, GetTradeItemData, GetTradeItemResponse, GetTradeItemByIdentifierData, GetTradeItemByIdentifierResponse, GetTradeItemSchemasData, GetTradeItemSchemasResponse, CreateTradeItemSchemaData, CreateTradeItemSchemaResponse, GetTradeItemSchemaData, GetTradeItemSchemaResponse, DeleteTradeItemSchemaData, DeleteTradeItemSchemaResponse, CreateTradeItemExtensionSchemaData, GetIconsData, GetIconsResponse, CreateOrganizationData, CreateOrganizationResponse, DeleteOrganizationData, GetOrganizationData, GetOrganizationResponse, UpdateOrganizationData, UpdateOrganizationResponse, GetEventsByIdentifierData, GetEventsByIdentifierResponse, RenderTrustGraphData, RenderTrustGraphResponse, CreateSchemaData, CreateSchemaResponse, DeleteSchemaData, GetSchemaData, GetSchemaResponse, UpdateSchemaData, UpdateSchemaResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Health Check
 */
export const healthCheck = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/health/status'
    });
};

/**
 * Get many assets
 * Get many assets
 */
export const getAssets = <ThrowOnError extends boolean = false>(options?: Options<GetAssetsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAssetsResponse, unknown, ThrowOnError>({
        ...options,
        url: '/assets'
    });
};

/**
 * Create a new asset
 * Create a new asset
 */
export const createAsset = <ThrowOnError extends boolean = false>(options: Options<CreateAssetData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateAssetResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/assets'
    });
};

/**
 * Delete an asset
 * Delete an asset
 */
export const deleteAsset = <ThrowOnError extends boolean = false>(options: Options<DeleteAssetData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/assets/{id}'
    });
};

/**
 * Get asset by ID
 * Get asset by ID
 */
export const getAssetById = <ThrowOnError extends boolean = false>(options: Options<GetAssetByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAssetByIdResponse, unknown, ThrowOnError>({
        ...options,
        url: '/assets/{id}'
    });
};

/**
 * Update an asset
 * Update an asset
 */
export const updateAsset = <ThrowOnError extends boolean = false>(options: Options<UpdateAssetData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateAssetResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/assets/{id}'
    });
};

/**
 * Get asset observations
 * Get all observations for an asset
 */
export const getAssetObservations = <ThrowOnError extends boolean = false>(options: Options<GetAssetObservationsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAssetObservationsResponse, unknown, ThrowOnError>({
        ...options,
        url: '/assets/{assetId}/observations'
    });
};

/**
 * Create a new asset observation
 * Create a new observation for an asset
 */
export const createAssetObservation = <ThrowOnError extends boolean = false>(options: Options<CreateAssetObservationData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateAssetObservationResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/assets/{assetId}/observations'
    });
};

/**
 * Delete an asset observation
 * Delete a specific observation for an asset
 */
export const deleteAssetObservation = <ThrowOnError extends boolean = false>(options: Options<DeleteAssetObservationData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/assets/{assetId}/observations/{id}'
    });
};

/**
 * Get asset observation by ID
 * Get a specific observation for an asset
 */
export const getAssetObservationById = <ThrowOnError extends boolean = false>(options: Options<GetAssetObservationByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAssetObservationByIdResponse, unknown, ThrowOnError>({
        ...options,
        url: '/assets/{assetId}/observations/{id}'
    });
};

/**
 * Get all tenant users
 */
export const getTenantUsers = <ThrowOnError extends boolean = false>(options?: Options<GetTenantUsersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTenantUsersResponse, unknown, ThrowOnError>({
        ...options,
        url: '/auth/tenant-users'
    });
};

/**
 * Create a tenant user
 */
export const createTenantUser = <ThrowOnError extends boolean = false>(options: Options<CreateTenantUserData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateTenantUserResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/auth/tenant-users'
    });
};

/**
 * Delete a tenant user
 */
export const deleteTenantUser = <ThrowOnError extends boolean = false>(options: Options<DeleteTenantUserData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/auth/tenant-users/{id}'
    });
};

/**
 * Get a tenant user by ID
 */
export const getTenantUserById = <ThrowOnError extends boolean = false>(options: Options<GetTenantUserByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTenantUserByIdResponse, unknown, ThrowOnError>({
        ...options,
        url: '/auth/tenant-users/{id}'
    });
};

/**
 * Update a tenant user
 */
export const updateTenantUser = <ThrowOnError extends boolean = false>(options: Options<UpdateTenantUserData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateTenantUserResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/auth/tenant-users/{id}'
    });
};

/**
 * Clear all sandbox data for the authenticated tenant user
 */
export const clearSandbox = <ThrowOnError extends boolean = false>(options?: Options<ClearSandboxData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/sandbox/clear'
    });
};

/**
 * Get a presigned URL for uploading a file to S3
 */
export const createUploadUrl = <ThrowOnError extends boolean = false>(options: Options<CreateUploadUrlData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateUploadUrlResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/s3/upload-url'
    });
};

/**
 * Get a S3 object by its ID
 */
export const getObject = <ThrowOnError extends boolean = false>(options: Options<GetObjectData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetObjectResponse, unknown, ThrowOnError>({
        ...options,
        url: '/s3/object/{id}'
    });
};

/**
 * Mint Bio Lock
 * Mint a BioLock
 */
export const mintBioLock = <ThrowOnError extends boolean = false>(options?: Options<MintBioLockData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/bio-locks/mint'
    });
};

/**
 * Set Bio Lock
 * Set a BioLock
 */
export const setBioLock = <ThrowOnError extends boolean = false>(options: Options<SetBioLockData, ThrowOnError>) => {
    return (options?.client ?? client).post<SetBioLockResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/bio-locks/set'
    });
};

/**
 * Get Bio Lock
 * Get Bio Lock
 */
export const getBioLock = <ThrowOnError extends boolean = false>(options: Options<GetBioLockData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/bio-locks/{id}'
    });
};

/**
 * Get all themes
 */
export const getThemes = <ThrowOnError extends boolean = false>(options?: Options<GetThemesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetThemesResponse, unknown, ThrowOnError>({
        ...options,
        url: '/themes'
    });
};

/**
 * Create Theme
 * Create a new theme
 */
export const createTheme = <ThrowOnError extends boolean = false>(options: Options<CreateThemeData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateThemeResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/themes'
    });
};

/**
 * Delete a theme by id
 */
export const deleteTheme = <ThrowOnError extends boolean = false>(options: Options<DeleteThemeData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/themes/{id}'
    });
};

/**
 * Get Theme
 * Get a theme by id
 */
export const getTheme = <ThrowOnError extends boolean = false>(options: Options<GetThemeData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetThemeResponse, unknown, ThrowOnError>({
        ...options,
        url: '/themes/{id}'
    });
};

/**
 * Update a theme by id
 */
export const updateTheme = <ThrowOnError extends boolean = false>(options: Options<UpdateThemeData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateThemeResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/themes/{id}'
    });
};

/**
 * Get Organization Theme
 * Get the requesting organizations themes
 */
export const getOrganizationTheme = <ThrowOnError extends boolean = false>(options?: Options<GetOrganizationThemeData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOrganizationThemeResponse, unknown, ThrowOnError>({
        ...options,
        url: '/organization-themes'
    });
};

/**
 * Create Organization Theme
 * Create a new organization theme
 */
export const createOrganizationTheme = <ThrowOnError extends boolean = false>(options: Options<CreateOrganizationThemeData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateOrganizationThemeResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/organization-themes'
    });
};

/**
 * Get Links
 */
export const getLinks = <ThrowOnError extends boolean = false>(options: Options<GetLinksData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetLinksResponse, unknown, ThrowOnError>({
        ...options,
        url: '/links'
    });
};

/**
 * Create Link
 */
export const createLink = <ThrowOnError extends boolean = false>(options: Options<CreateLinkData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateLinkResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/links'
    });
};

/**
 * Delete Link
 */
export const deleteLink = <ThrowOnError extends boolean = false>(options: Options<DeleteLinkData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/links/{id}'
    });
};

/**
 * Get Link by ID
 */
export const getLink = <ThrowOnError extends boolean = false>(options: Options<GetLinkData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetLinkResponse, unknown, ThrowOnError>({
        ...options,
        url: '/links/{id}'
    });
};

export const linkResolverControllerResolve = <ThrowOnError extends boolean = false>(options: Options<LinkResolverControllerResolveData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/link-resolver/{path}'
    });
};

/**
 * Get Canvas Template
 * Get a Canvas Template by id.
 */
export const getCanvasTemplate = <ThrowOnError extends boolean = false>(options: Options<GetCanvasTemplateData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCanvasTemplateResponse, unknown, ThrowOnError>({
        ...options,
        url: '/canvas-templates/{id}'
    });
};

/**
 * Create Canvas Template
 * Create a Canvas Template.
 */
export const createCanvasTemplate = <ThrowOnError extends boolean = false>(options: Options<CreateCanvasTemplateData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateCanvasTemplateResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/canvas-templates'
    });
};

/**
 * Render Canvas Template
 * Create an instance of a Canvased Template.
 */
export const renderCanvasTemplate = <ThrowOnError extends boolean = false>(options: Options<RenderCanvasTemplateData, ThrowOnError>) => {
    return (options?.client ?? client).post<RenderCanvasTemplateResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/canvas-templates/{id}/render'
    });
};

/**
 * Get Credential Issuer Profiles
 * Get all credential issuer profiles
 */
export const getCredentialIssuerProfiles = <ThrowOnError extends boolean = false>(options: Options<GetCredentialIssuerProfilesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCredentialIssuerProfilesResponse, unknown, ThrowOnError>({
        ...options,
        url: '/credential-issuer-profiles'
    });
};

/**
 * Create Credential Issuer Profile
 * Create a new credential issuer profile
 */
export const createCredentialIssuerProfile = <ThrowOnError extends boolean = false>(options: Options<CreateCredentialIssuerProfileData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateCredentialIssuerProfileResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/credential-issuer-profiles'
    });
};

/**
 * Delete Credential Issuer Profile
 * Delete a credential issuer profile by ID
 */
export const deleteCredentialIssuerProfile = <ThrowOnError extends boolean = false>(options: Options<DeleteCredentialIssuerProfileData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteCredentialIssuerProfileResponse, unknown, ThrowOnError>({
        ...options,
        url: '/credential-issuer-profiles/{id}'
    });
};

/**
 * Get Credential Issuer Profile
 * Get a credential issuer profile by ID
 */
export const getCredentialIssuerProfile = <ThrowOnError extends boolean = false>(options: Options<GetCredentialIssuerProfileData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCredentialIssuerProfileResponse, unknown, ThrowOnError>({
        ...options,
        url: '/credential-issuer-profiles/{id}'
    });
};

/**
 * Get Credential
 * Retrieves a credential by its ID.
 */
export const getCredential = <ThrowOnError extends boolean = false>(options: Options<GetCredentialData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/credentials/{id}'
    });
};

/**
 * Issue Credential
 * Issues a credential and returns it in the response body.
 */
export const issueCredential = <ThrowOnError extends boolean = false>(options: Options<IssueCredentialData, ThrowOnError>) => {
    return (options?.client ?? client).post<IssueCredentialResponse2, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/credentials/issue'
    });
};

/**
 * Verify Credential
 * Verifies a verifiableCredential and returns a verificationResult in the response body.
 */
export const verifyCredential = <ThrowOnError extends boolean = false>(options: Options<VerifyCredentialData, ThrowOnError>) => {
    return (options?.client ?? client).post<VerifyCredentialResponse2, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/credentials/verify'
    });
};

/**
 * Get Custody Commissions
 * Get many custody commissions
 */
export const getCustodyCommissions = <ThrowOnError extends boolean = false>(options?: Options<GetCustodyCommissionsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCustodyCommissionsResponse, unknown, ThrowOnError>({
        ...options,
        url: '/custody-commissions'
    });
};

/**
 * Create Custody Commission
 * Create a custody commission
 */
export const createCustodyCommission = <ThrowOnError extends boolean = false>(options: Options<CreateCustodyCommissionData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateCustodyCommissionResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/custody-commissions'
    });
};

/**
 * Delete Custody Commission
 * Delete a custody commission
 */
export const deleteCustodyCommission = <ThrowOnError extends boolean = false>(options: Options<DeleteCustodyCommissionData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteCustodyCommissionResponse, unknown, ThrowOnError>({
        ...options,
        url: '/custody-commissions/{id}'
    });
};

/**
 * Get Custody Commission
 * Get a custody commission
 */
export const getCustodyCommission = <ThrowOnError extends boolean = false>(options: Options<GetCustodyCommissionData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCustodyCommissionResponse, unknown, ThrowOnError>({
        ...options,
        url: '/custody-commissions/{id}'
    });
};

/**
 * Update Custody Commission
 * Update a custody commission
 */
export const updateCustodyCommission = <ThrowOnError extends boolean = false>(options: Options<UpdateCustodyCommissionData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateCustodyCommissionResponse, unknown, ThrowOnError>({
        ...options,
        url: '/custody-commissions/{id}'
    });
};

/**
 * Consume Custody Commission
 * Consume a custody commission
 */
export const consumeCustodyCommission = <ThrowOnError extends boolean = false>(options: Options<ConsumeCustodyCommissionData, ThrowOnError>) => {
    return (options?.client ?? client).post<ConsumeCustodyCommissionResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/custody-commissions/consume'
    });
};

/**
 * Get DIDs
 * Get all DIDs for the requested organization.
 */
export const getDids = <ThrowOnError extends boolean = false>(options?: Options<GetDidsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetDidsResponse, unknown, ThrowOnError>({
        ...options,
        url: '/did'
    });
};

/**
 * Create DID
 * Create a unique DID for the requested organization.
 */
export const createDid = <ThrowOnError extends boolean = false>(options: Options<CreateDidData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateDidResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/did'
    });
};

/**
 * Delete DID
 * Delete a DID by ID
 */
export const deleteDid = <ThrowOnError extends boolean = false>(options: Options<DeleteDidData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteDidResponse, unknown, ThrowOnError>({
        ...options,
        url: '/did/{id}'
    });
};

/**
 * Get DID
 * Get a DID by ID
 */
export const getDid = <ThrowOnError extends boolean = false>(options: Options<GetDidData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetDidResponse, unknown, ThrowOnError>({
        ...options,
        url: '/did/{id}'
    });
};

/**
 * Get a trust graph by id
 * Get a trust graph by id
 */
export const getTrustGraph = <ThrowOnError extends boolean = false>(options: Options<GetTrustGraphData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTrustGraphResponse, unknown, ThrowOnError>({
        ...options,
        url: '/discovery/trust-graph/{id}'
    });
};

/**
 * Traverse a trust graph
 * Traverse a trust graph
 */
export const traverseTrustGraph = <ThrowOnError extends boolean = false>(options: Options<TraverseTrustGraphData, ThrowOnError>) => {
    return (options?.client ?? client).post<TraverseTrustGraphResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/discovery/trust-graph/traverse'
    });
};

/**
 * Get a policy by id
 * Get a policy by id
 */
export const getPolicyById = <ThrowOnError extends boolean = false>(options: Options<GetPolicyByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPolicyByIdResponse, unknown, ThrowOnError>({
        ...options,
        url: '/policies/{id}'
    });
};

/**
 * Get all policies
 * Get all policies
 */
export const getPolicies = <ThrowOnError extends boolean = false>(options?: Options<GetPoliciesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPoliciesResponse, unknown, ThrowOnError>({
        ...options,
        url: '/policies'
    });
};

/**
 * Create a DPP
 * Create a DPP
 */
export const createDpp = <ThrowOnError extends boolean = false>(options: Options<CreateDppData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateDppResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/dpp'
    });
};

/**
 * Delete a DPP
 * Delete a DPP
 */
export const deleteDpp = <ThrowOnError extends boolean = false>(options: Options<DeleteDppData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/dpp/{id}'
    });
};

/**
 * Get a DPP
 * Get a DPP
 */
export const getDpp = <ThrowOnError extends boolean = false>(options: Options<GetDppData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetDppResponse, unknown, ThrowOnError>({
        ...options,
        url: '/dpp/{id}'
    });
};

/**
 * Get Provenance Forms
 * Get many provenance forms
 */
export const getProvenanceForms = <ThrowOnError extends boolean = false>(options?: Options<GetProvenanceFormsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProvenanceFormsResponse, unknown, ThrowOnError>({
        ...options,
        url: '/provenance-forms'
    });
};

/**
 * Create Provenance Form
 * Create a new provenance form
 */
export const createProvenanceForm = <ThrowOnError extends boolean = false>(options: Options<CreateProvenanceFormData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateProvenanceFormResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/provenance-forms'
    });
};

/**
 * Delete Provenance Form
 * Delete a provenance form
 */
export const deleteProvenanceForm = <ThrowOnError extends boolean = false>(options: Options<DeleteProvenanceFormData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/provenance-forms/{id}'
    });
};

/**
 * Get Provenance Form
 * Get a provenance form by ID
 */
export const getProvenanceForm = <ThrowOnError extends boolean = false>(options: Options<GetProvenanceFormData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProvenanceFormResponse, unknown, ThrowOnError>({
        ...options,
        url: '/provenance-forms/{id}'
    });
};

/**
 * Update Provenance Form
 * Update a provenance form
 */
export const updateProvenanceForm = <ThrowOnError extends boolean = false>(options: Options<UpdateProvenanceFormData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateProvenanceFormResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/provenance-forms/{id}'
    });
};

/**
 * Get Organization App Entry
 * Get the app entry for the current organization, returns default routes if none exists
 */
export const getAppEntryOrganization = <ThrowOnError extends boolean = false>(options?: Options<GetAppEntryOrganizationData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAppEntryOrganizationResponse, unknown, ThrowOnError>({
        ...options,
        url: '/app-entry/organization'
    });
};

/**
 * Set Organization App Entry
 * Create or update the app entry for the current organization
 */
export const setAppEntryOrganization = <ThrowOnError extends boolean = false>(options: Options<SetAppEntryOrganizationData, ThrowOnError>) => {
    return (options?.client ?? client).put<SetAppEntryOrganizationResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/app-entry/organization'
    });
};

/**
 * Get Organization App Theme
 * Get the app theme for the current organization, returns default theme if none exists
 */
export const getAppThemeOrganization = <ThrowOnError extends boolean = false>(options?: Options<GetAppThemeOrganizationData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAppThemeOrganizationResponse, unknown, ThrowOnError>({
        ...options,
        url: '/app-theme/organization'
    });
};

/**
 * Set Organization App Theme
 * Create or update the app theme for the current organization
 */
export const setAppThemeOrganization = <ThrowOnError extends boolean = false>(options: Options<SetAppThemeOrganizationData, ThrowOnError>) => {
    return (options?.client ?? client).put<SetAppThemeOrganizationResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/app-theme/organization'
    });
};

/**
 * Get Event Schemas
 * Get event schemas
 */
export const getEventSchemas = <ThrowOnError extends boolean = false>(options?: Options<GetEventSchemasData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetEventSchemasResponse, unknown, ThrowOnError>({
        ...options,
        url: '/event-schemas'
    });
};

/**
 * Create an event schema
 */
export const createEventSchema = <ThrowOnError extends boolean = false>(options: Options<CreateEventSchemaData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateEventSchemaResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/event-schemas'
    });
};

/**
 * Set schemas for an event
 */
export const setEventSchemas = <ThrowOnError extends boolean = false>(options: Options<SetEventSchemasData, ThrowOnError>) => {
    return (options?.client ?? client).post<SetEventSchemasResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/event-schemas/set'
    });
};

/**
 * Delete an event schema
 */
export const deleteEventSchema = <ThrowOnError extends boolean = false>(options: Options<DeleteEventSchemaData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/event-schemas/{id}'
    });
};

/**
 * Get an event schema
 */
export const getEventSchema = <ThrowOnError extends boolean = false>(options: Options<GetEventSchemaData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetEventSchemaResponse, unknown, ThrowOnError>({
        ...options,
        url: '/event-schemas/{id}'
    });
};

/**
 * Create an extension schema for an event schema
 */
export const createEventExtensionSchema = <ThrowOnError extends boolean = false>(options: Options<CreateEventExtensionSchemaData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/event-schemas/{id}/extension-schemas'
    });
};

/**
 * Create an ILMD schema for an event schema
 */
export const createIlmdSchema = <ThrowOnError extends boolean = false>(options: Options<CreateIlmdSchemaData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/event-schemas/{id}/ilmd-schemas'
    });
};

/**
 * Get Events
 * Get many events
 */
export const getEvents = <ThrowOnError extends boolean = false>(options?: Options<GetEventsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetEventsResponse, unknown, ThrowOnError>({
        ...options,
        url: '/events'
    });
};

/**
 * Create Event
 * Create an event
 */
export const createEvent = <ThrowOnError extends boolean = false>(options: Options<CreateEventData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateEventResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/events'
    });
};

/**
 * Delete Event
 * Delete an event
 */
export const deleteEvent = <ThrowOnError extends boolean = false>(options: Options<DeleteEventData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/events/{id}'
    });
};

/**
 * Get Event
 * Get an event
 */
export const getEvent = <ThrowOnError extends boolean = false>(options: Options<GetEventData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetEventResponse, unknown, ThrowOnError>({
        ...options,
        url: '/events/{id}'
    });
};

/**
 * Get the ILMD for an identifier
 */
export const identifierControllerIlmd = <ThrowOnError extends boolean = false>(options: Options<IdentifierControllerIlmdData, ThrowOnError>) => {
    return (options?.client ?? client).get<IdentifierControllerIlmdResponse, unknown, ThrowOnError>({
        ...options,
        url: '/identifiers/{id}/ilmd'
    });
};

/**
 * Get all FAO codes
 * Get all FAO codes
 */
export const getFaoCodes = <ThrowOnError extends boolean = false>(options?: Options<GetFaoCodesData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/fao-codes'
    });
};

/**
 * Get Locations
 * Get many locations
 */
export const getLocations = <ThrowOnError extends boolean = false>(options?: Options<GetLocationsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetLocationsResponse, unknown, ThrowOnError>({
        ...options,
        url: '/locations'
    });
};

/**
 * Create Location
 * Create a location
 */
export const createLocation = <ThrowOnError extends boolean = false>(options: Options<CreateLocationData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateLocationResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/locations'
    });
};

/**
 * Get Location
 * Get a location
 */
export const getLocation = <ThrowOnError extends boolean = false>(options: Options<GetLocationData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetLocationResponse, unknown, ThrowOnError>({
        ...options,
        url: '/locations/{id}'
    });
};

/**
 * Get Location by Identifier
 * Get a location by its identifier
 */
export const getLocationByIdentifier = <ThrowOnError extends boolean = false>(options: Options<GetLocationByIdentifierData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetLocationByIdentifierResponse, unknown, ThrowOnError>({
        ...options,
        url: '/locations/by-identifier/{identifier}'
    });
};

/**
 * Get Location Inventory
 * Get inventory for a location
 */
export const getLocationInventory = <ThrowOnError extends boolean = false>(options: Options<GetLocationInventoryData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetLocationInventoryResponse, unknown, ThrowOnError>({
        ...options,
        url: '/locations/{id}/inventory'
    });
};

/**
 * Get Location Schemas
 * Get location schemas
 */
export const getLocationSchemas = <ThrowOnError extends boolean = false>(options?: Options<GetLocationSchemasData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetLocationSchemasResponse, unknown, ThrowOnError>({
        ...options,
        url: '/location-schemas'
    });
};

/**
 * Create a location schema
 */
export const createLocationSchema = <ThrowOnError extends boolean = false>(options: Options<CreateLocationSchemaData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateLocationSchemaResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/location-schemas'
    });
};

/**
 * Delete a location schema
 */
export const deleteLocationSchema = <ThrowOnError extends boolean = false>(options: Options<DeleteLocationSchemaData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/location-schemas/{id}'
    });
};

/**
 * Get a location schema
 */
export const getLocationSchema = <ThrowOnError extends boolean = false>(options: Options<GetLocationSchemaData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetLocationSchemaResponse, unknown, ThrowOnError>({
        ...options,
        url: '/location-schemas/{id}'
    });
};

/**
 * Create an extension schema for a location schema
 */
export const createLocationExtensionSchema = <ThrowOnError extends boolean = false>(options: Options<CreateLocationExtensionSchemaData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/location-schemas/{id}/extension-schemas'
    });
};

/**
 * Get all partners
 * Get all partners
 */
export const getPartners = <ThrowOnError extends boolean = false>(options?: Options<GetPartnersData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPartnersResponse, unknown, ThrowOnError>({
        ...options,
        url: '/partners'
    });
};

/**
 * Create a partner
 * Create a partner
 */
export const createPartner = <ThrowOnError extends boolean = false>(options: Options<CreatePartnerData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreatePartnerResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/partners'
    });
};

/**
 * Delete a partner by ID
 * Delete a partner by ID
 */
export const deletePartner = <ThrowOnError extends boolean = false>(options: Options<DeletePartnerData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/partners/{id}'
    });
};

/**
 * Get a partner by ID
 * Get a partner by ID
 */
export const getPartner = <ThrowOnError extends boolean = false>(options: Options<GetPartnerData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPartnerResponse, unknown, ThrowOnError>({
        ...options,
        url: '/partners/{id}'
    });
};

/**
 * Get Partner Schemas
 * Get partner schemas
 */
export const getPartnerSchemas = <ThrowOnError extends boolean = false>(options?: Options<GetPartnerSchemasData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPartnerSchemasResponse, unknown, ThrowOnError>({
        ...options,
        url: '/partner-schemas'
    });
};

/**
 * Create a partner schema
 */
export const createPartnerSchema = <ThrowOnError extends boolean = false>(options: Options<CreatePartnerSchemaData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreatePartnerSchemaResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/partner-schemas'
    });
};

/**
 * Get a partner schema by code
 */
export const getPartnerSchemaByCode = <ThrowOnError extends boolean = false>(options: Options<GetPartnerSchemaByCodeData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPartnerSchemaByCodeResponse, unknown, ThrowOnError>({
        ...options,
        url: '/partner-schemas/{code}'
    });
};

/**
 * Delete a partner schema
 */
export const deletePartnerSchema = <ThrowOnError extends boolean = false>(options: Options<DeletePartnerSchemaData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/partner-schemas/{id}'
    });
};

/**
 * Get Trade Items
 * Get many trade items
 */
export const getTradeItems = <ThrowOnError extends boolean = false>(options?: Options<GetTradeItemsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTradeItemsResponse, unknown, ThrowOnError>({
        ...options,
        url: '/trade-items'
    });
};

/**
 * Create Trade Item
 * Create a trade item
 */
export const createTradeItem = <ThrowOnError extends boolean = false>(options: Options<CreateTradeItemData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateTradeItemResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/trade-items'
    });
};

/**
 * Delete Trade Item
 * Delete a trade item
 */
export const deleteTradeItem = <ThrowOnError extends boolean = false>(options: Options<DeleteTradeItemData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/trade-items/{id}'
    });
};

/**
 * Get Trade Item
 * Get a trade item
 */
export const getTradeItem = <ThrowOnError extends boolean = false>(options: Options<GetTradeItemData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTradeItemResponse, unknown, ThrowOnError>({
        ...options,
        url: '/trade-items/{id}'
    });
};

/**
 * Get Trade Item by Identifier
 * Get a trade item by its identifier
 */
export const getTradeItemByIdentifier = <ThrowOnError extends boolean = false>(options: Options<GetTradeItemByIdentifierData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTradeItemByIdentifierResponse, unknown, ThrowOnError>({
        ...options,
        url: '/trade-items/by-identifier/{identifier}'
    });
};

/**
 * Get Trade Item Schemas
 * Get all trade item schemas
 */
export const getTradeItemSchemas = <ThrowOnError extends boolean = false>(options?: Options<GetTradeItemSchemasData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTradeItemSchemasResponse, unknown, ThrowOnError>({
        ...options,
        url: '/trade-item-schemas'
    });
};

/**
 * Create Trade Item Schema
 * Create a trade item schema
 */
export const createTradeItemSchema = <ThrowOnError extends boolean = false>(options: Options<CreateTradeItemSchemaData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateTradeItemSchemaResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/trade-item-schemas'
    });
};

/**
 * Get Trade Item Schema
 * Get a trade item schema by code
 */
export const getTradeItemSchema = <ThrowOnError extends boolean = false>(options: Options<GetTradeItemSchemaData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTradeItemSchemaResponse, unknown, ThrowOnError>({
        ...options,
        url: '/trade-item-schemas/{code}'
    });
};

/**
 * Delete Trade Item Schema
 * Delete a trade item schema
 */
export const deleteTradeItemSchema = <ThrowOnError extends boolean = false>(options: Options<DeleteTradeItemSchemaData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteTradeItemSchemaResponse, unknown, ThrowOnError>({
        ...options,
        url: '/trade-item-schemas/{id}'
    });
};

/**
 * Create an extension schema for a trade item schema
 */
export const createTradeItemExtensionSchema = <ThrowOnError extends boolean = false>(options: Options<CreateTradeItemExtensionSchemaData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/trade-item-schemas/{id}/extension-schemas'
    });
};

/**
 * Get Icons
 * Get all icons
 */
export const getIcons = <ThrowOnError extends boolean = false>(options?: Options<GetIconsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetIconsResponse, unknown, ThrowOnError>({
        ...options,
        url: '/icons'
    });
};

/**
 * Create an organization
 */
export const createOrganization = <ThrowOnError extends boolean = false>(options: Options<CreateOrganizationData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateOrganizationResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/organizations'
    });
};

/**
 * Delete an organization
 */
export const deleteOrganization = <ThrowOnError extends boolean = false>(options: Options<DeleteOrganizationData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/organizations/{id}'
    });
};

/**
 * Get an organization
 */
export const getOrganization = <ThrowOnError extends boolean = false>(options: Options<GetOrganizationData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOrganizationResponse, unknown, ThrowOnError>({
        ...options,
        url: '/organizations/{id}'
    });
};

/**
 * Update an organization
 */
export const updateOrganization = <ThrowOnError extends boolean = false>(options: Options<UpdateOrganizationData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateOrganizationResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/organizations/{id}'
    });
};

/**
 * Get Events by Identifier
 * Get all events associated with a provided identifier
 */
export const getEventsByIdentifier = <ThrowOnError extends boolean = false>(options: Options<GetEventsByIdentifierData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetEventsByIdentifierResponse, unknown, ThrowOnError>({
        ...options,
        url: '/provenance/{identifier}'
    });
};

/**
 * Render a trust graph
 * Render a trust graph
 */
export const renderTrustGraph = <ThrowOnError extends boolean = false>(options: Options<RenderTrustGraphData, ThrowOnError>) => {
    return (options?.client ?? client).get<RenderTrustGraphResponse, unknown, ThrowOnError>({
        ...options,
        url: '/render/discovery/trust-graph/{id}'
    });
};

/**
 * Create a schema
 */
export const createSchema = <ThrowOnError extends boolean = false>(options: Options<CreateSchemaData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateSchemaResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/schemas'
    });
};

/**
 * Delete a schema
 */
export const deleteSchema = <ThrowOnError extends boolean = false>(options: Options<DeleteSchemaData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/schemas/{id}'
    });
};

/**
 * Get a schema
 */
export const getSchema = <ThrowOnError extends boolean = false>(options: Options<GetSchemaData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSchemaResponse, unknown, ThrowOnError>({
        ...options,
        url: '/schemas/{id}'
    });
};

/**
 * Update a schema
 */
export const updateSchema = <ThrowOnError extends boolean = false>(options: Options<UpdateSchemaData, ThrowOnError>) => {
    return (options?.client ?? client).put<UpdateSchemaResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/schemas/{id}'
    });
};